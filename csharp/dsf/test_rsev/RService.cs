/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace net91com.MobileResRecommend.Thrift
{
  public partial class RService {
    /// <summary>
    /// 主题、软件推荐服务
    /// </summary>
    public interface Iface {
      /// <summary>
      /// 根据IMEI推荐软件
      /// @param string imei - imei
      /// @param i32 fwVersion - 版本号
      /// @param i32 pad - 设备类型（平板或手机）
      /// @param list<i32> categoryIds - 包含类别
      /// @param list<i32> excludeCategoryIds - 排除类别
      /// @param i32 size - 获取条数
      /// @param i32 project - 项目编号
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param bool guessAgain - 再猜一次
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="size"></param>
      /// <param name="project"></param>
      /// <param name="isLimit"></param>
      /// <param name="guessAgain"></param>
      byte[] GetSoftRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit, bool guessAgain);
      #if SILVERLIGHT
      IAsyncResult Begin_GetSoftRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit, bool guessAgain);
      byte[] End_GetSoftRecommendByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI获取推荐软件(过滤已展示多次的软件)
      /// @param string imei - imei
      /// @param i32 fwVersion - 版本号
      /// @param i32 pad - 设备类型（平板或手机）
      /// @param list<i32> categoryIds - 包含类别
      /// @param list<i32> excludeCategoryIds - 排除类别
      /// @param i32 size - 获取条数
      /// @param i32 project - 项目编号
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="size"></param>
      /// <param name="project"></param>
      /// <param name="isLimit"></param>
      byte[] GetSoftRecommendWithFilterByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit);
      #if SILVERLIGHT
      IAsyncResult Begin_GetSoftRecommendWithFilterByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit);
      byte[] End_GetSoftRecommendWithFilterByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据软件ID、手机平台推荐相关软件
      /// @param string imei - imei
      /// @param i32 fwVersion - 版本号
      /// @param i32 pad - 设备类型（平板或手机）
      /// @param list<i32> categoryIds - 包含类别
      /// @param list<i32> excludeCategoryIds - 排除类别
      /// @param i32 size - 获取条数
      /// @param i32 project - 项目编号
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softId"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="size"></param>
      /// <param name="project"></param>
      /// <param name="isLimit"></param>
      byte[] GetRecommendSoftsBySoftId(string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRecommendSoftsBySoftId(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit);
      byte[] End_GetRecommendSoftsBySoftId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据软件Identifier、手机平台推荐相关软件
      /// @param string imei - imei
      /// @param i32 fwVersion - 版本号
      /// @param i32 pad - 设备类型（平板或手机）
      /// @param list<i32> categoryIds - 包含类别
      /// @param list<i32> excludeCategoryIds - 排除类别
      /// @param i32 size - 获取条数
      /// @param i32 project - 项目编号
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softIndentifier"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="size"></param>
      /// <param name="project"></param>
      /// <param name="isLimit"></param>
      byte[] GetRecommendSoftsBySoftIdentifier(string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRecommendSoftsBySoftIdentifier(AsyncCallback callback, object state, string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit);
      byte[] End_GetRecommendSoftsBySoftIdentifier(IAsyncResult asyncResult);
      #endif
      /// <summary>
      ///  依据用户推荐相关主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      byte[] GetThemeRecommendUserUse(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeRecommendUserUse(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd);
      byte[] End_GetThemeRecommendUserUse(IAsyncResult asyncResult);
      #endif
      /// <summary>
      ///  依据用户推荐相关主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      byte[] GetThemeV6RecommendUserUse(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeV6RecommendUserUse(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd);
      byte[] End_GetThemeV6RecommendUserUse(IAsyncResult asyncResult);
      #endif
      /// <summary>
      ///  依据用户推荐相关主题 (新版)
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      byte[] GetThemeRecommendUserUseV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeRecommendUserUseV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      byte[] End_GetThemeRecommendUserUseV2(IAsyncResult asyncResult);
      #endif
      /// <summary>
      ///  依据用户推荐相关主题 (新版)
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      byte[] GetThemeV6RecommendUserUseV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeV6RecommendUserUseV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      byte[] End_GetThemeV6RecommendUserUseV2(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      byte[] GetGoodThemeRecommendUser(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGoodThemeRecommendUser(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption);
      byte[] End_GetGoodThemeRecommendUser(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      byte[] GetGoodThemeV6RecommendUser(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGoodThemeV6RecommendUser(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption);
      byte[] End_GetGoodThemeV6RecommendUser(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      byte[] GetGoodThemeRecommendUserV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGoodThemeRecommendUserV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      byte[] End_GetGoodThemeRecommendUserV2(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      byte[] GetGoodThemeV6RecommendUserV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGoodThemeV6RecommendUserV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      byte[] End_GetGoodThemeV6RecommendUserV2(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题ID获取关联主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      byte[] GetThemeRecommendThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeRecommendThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd);
      byte[] End_GetThemeRecommendThemeId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题ID获取关联主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      byte[] GetThemeV6RecommendThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeV6RecommendThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd);
      byte[] End_GetThemeV6RecommendThemeId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题ID获取关联主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      byte[] GetThemeRecommendThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeRecommendThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      byte[] End_GetThemeRecommendThemeIdV2(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题ID获取关联主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      byte[] GetThemeV6RecommendThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeV6RecommendThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      byte[] End_GetThemeV6RecommendThemeIdV2(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题ID获取相似主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      byte[] GetThemeSimilarThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeSimilarThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd);
      byte[] End_GetThemeSimilarThemeId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题ID获取相似主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      byte[] GetThemeV6SimilarThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeV6SimilarThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd);
      byte[] End_GetThemeV6SimilarThemeId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题ID获取相似主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      byte[] GetThemeSimilarThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeSimilarThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      byte[] End_GetThemeSimilarThemeIdV2(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题ID获取相似主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      byte[] GetThemeV6SimilarThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      #if SILVERLIGHT
      IAsyncResult Begin_GetThemeV6SimilarThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj);
      byte[] End_GetThemeV6SimilarThemeIdV2(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 计算新上架主题的推荐
      /// </summary>
      /// <param name="themeId"></param>
      int CalculateThemeRecommendById(int themeId);
      #if SILVERLIGHT
      IAsyncResult Begin_CalculateThemeRecommendById(AsyncCallback callback, object state, int themeId);
      int End_CalculateThemeRecommendById(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI，返回所有安装过的软件Identifier
      /// @param string imei - 用户IMEI
      /// @param i32 platform - 平台
      /// @param i32 isUninstalled - -1:全部软件; 0:已安装软件; 1:已卸载软件
      /// @return list<string> - Identifier列表
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="platform"></param>
      /// <param name="isUninstalled"></param>
      List<string> GetInstalledSoftIdentifiersByImei(string imei, int platform, int isUninstalled);
      #if SILVERLIGHT
      IAsyncResult Begin_GetInstalledSoftIdentifiersByImei(AsyncCallback callback, object state, string imei, int platform, int isUninstalled);
      List<string> End_GetInstalledSoftIdentifiersByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI，返回所有安装过的软件Identifier_int
      /// @param string imei - 用户IMEI
      /// @param i32 platform - 平台
      /// @param i32 isUninstalled - -1:全部软件; 0:已安装软件; 1:已卸载软件
      /// @return list<i32> - Identifier_int列表
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="platform"></param>
      /// <param name="isUninstalled"></param>
      List<int> GetInstalledSoftIdsByImei(string imei, int platform, int isUninstalled);
      #if SILVERLIGHT
      IAsyncResult Begin_GetInstalledSoftIdsByImei(AsyncCallback callback, object state, string imei, int platform, int isUninstalled);
      List<int> End_GetInstalledSoftIdsByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// * 根据uin，返回所有安装过的软件Identifier
      /// * @param i64 uin - 用户uin
      /// * @param i32 platform - 平台
      /// * @param list<string> excludeImeis - 需排除的IMEI列表
      ///    * @return list<string> - Identifier列表
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="platform"></param>
      /// <param name="excludeImeis"></param>
      List<string> GetInstalledSoftIdentifiersByUin(long uin, int platform, List<string> excludeImeis);
      #if SILVERLIGHT
      IAsyncResult Begin_GetInstalledSoftIdentifiersByUin(AsyncCallback callback, object state, long uin, int platform, List<string> excludeImeis);
      List<string> End_GetInstalledSoftIdentifiersByUin(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据uin，返回所有安装过的软件Identifier_int
      /// @param i64 uin - 用户uin
      /// @param i32 platform - 平台
      /// @param list<string> excludeImeis - 需排除的IMEI列表
      /// @return list<i32> - Identifier_int列表
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="platform"></param>
      /// <param name="excludeImeis"></param>
      List<int> GetInstalledSoftIdsByUin(long uin, int platform, List<string> excludeImeis);
      #if SILVERLIGHT
      IAsyncResult Begin_GetInstalledSoftIdsByUin(AsyncCallback callback, object state, long uin, int platform, List<string> excludeImeis);
      List<int> End_GetInstalledSoftIdsByUin(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI推荐软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param bool processColdBoot - 是否采用默认数据解决冷启动问题
      /// @param bool addExplanations - 是否返回推荐解释
      /// @param i32 actionType - 接口行为类型
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="project"></param>
      /// <param name="isOldVer"></param>
      /// <param name="processColdBoot"></param>
      /// <param name="addExplanations"></param>
      /// <param name="actionType"></param>
      /// <param name="addIntroReason"></param>
      /// <param name="guessAgain"></param>
      /// <param name="uin"></param>
      /// <param name="filterFilterableSofts"></param>
      /// <param name="cpu"></param>
      byte[] Internal_GetSoftRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetSoftRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu);
      byte[] End_Internal_GetSoftRecommendByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI获取push的推荐软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param bool processColdBoot - 是否采用默认数据解决冷启动问题
      /// @param bool addExplanations - 是否返回推荐解释
      /// @param i32 actionType - 接口行为类型
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="project"></param>
      /// <param name="isOldVer"></param>
      /// <param name="processColdBoot"></param>
      /// <param name="addExplanations"></param>
      /// <param name="actionType"></param>
      /// <param name="addIntroReason"></param>
      /// <param name="guessAgain"></param>
      /// <param name="uin"></param>
      /// <param name="filterFilterableSofts"></param>
      /// <param name="cpu"></param>
      byte[] Internal_GetPushRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetPushRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu);
      byte[] End_Internal_GetPushRecommendByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI获取定向推送的推荐软件
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 actionType - 接口行为类型
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="project"></param>
      /// <param name="isOldVer"></param>
      /// <param name="actionType"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      byte[] Internal_GetDirectPushRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, int isAuthorize, int project, bool isOldVer, int actionType, long uin, int cpu);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetDirectPushRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, int isAuthorize, int project, bool isOldVer, int actionType, long uin, int cpu);
      byte[] End_Internal_GetDirectPushRecommendByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据软件ID、手机平台推荐相关软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 startIndex - 从指定开始位置取推荐
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softId"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="isOldVer"></param>
      /// <param name="startIndex"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      /// <param name="actionType"></param>
      /// <param name="project"></param>
      byte[] Internal_GetRecommendSoftsBySoftId(string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetRecommendSoftsBySoftId(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project);
      byte[] End_Internal_GetRecommendSoftsBySoftId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据软件ID、手机平台推荐相关软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 startIndex - 从指定开始位置取推荐
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softId"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="isOldVer"></param>
      /// <param name="startIndex"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      /// <param name="explanationType"></param>
      /// <param name="isFillRecommendSofts"></param>
      /// <param name="actionType"></param>
      /// <param name="project"></param>
      byte[] Internal_GetRecommendSoftsExBySoftId(string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetRecommendSoftsExBySoftId(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project);
      byte[] End_Internal_GetRecommendSoftsExBySoftId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据软件Identifier、手机平台推荐相关软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 startIndex - 从指定开始位置取推荐
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softIndentifier"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="isOldVer"></param>
      /// <param name="startIndex"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      /// <param name="actionType"></param>
      /// <param name="project"></param>
      byte[] Internal_GetRecommendSoftsBySoftIdentifier(string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetRecommendSoftsBySoftIdentifier(AsyncCallback callback, object state, string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project);
      byte[] End_Internal_GetRecommendSoftsBySoftIdentifier(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据软件Identifier、手机平台推荐相关软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 startIndex - 从指定开始位置取推荐
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softIndentifier"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="isOldVer"></param>
      /// <param name="startIndex"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      /// <param name="explanationType"></param>
      /// <param name="isFillRecommendSofts"></param>
      /// <param name="actionType"></param>
      /// <param name="project"></param>
      byte[] Internal_GetRecommendSoftsExBySoftIdentifier(string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetRecommendSoftsExBySoftIdentifier(AsyncCallback callback, object state, string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project);
      byte[] End_Internal_GetRecommendSoftsExBySoftIdentifier(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI，分页返回安装过的软件
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="pageSize"></param>
      /// <param name="pageIndex"></param>
      /// <param name="enableCache"></param>
      /// <param name="installedStatus"></param>
      byte[] Internal_GetInstalledSoftByImei(string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache, int installedStatus);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetInstalledSoftByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache, int installedStatus);
      byte[] End_Internal_GetInstalledSoftByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI，分页返回安装过的数量（含已卸载，仅我们库中存在的那些软件）
      /// @return i32 - 返回安装过的数量
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      int Internal_GetInstalledSoftCountByImei(string imei, int fwVersion, int pad);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetInstalledSoftCountByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad);
      int End_Internal_GetInstalledSoftCountByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据Uin，返回安装过的软件总数（含已卸载，仅我们库中存在的那些软件）
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="pageSize"></param>
      /// <param name="pageIndex"></param>
      /// <param name="enableCache"></param>
      byte[] Internal_GetInstalledSoftByUin(long uin, string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetInstalledSoftByUin(AsyncCallback callback, object state, long uin, string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache);
      byte[] End_Internal_GetInstalledSoftByUin(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据uin, 获取用户所有IMEI
      /// @param bool filterByPlatform - 是否只返回指定平台下有数据的IMEI
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="filterByPlatform"></param>
      List<string> Internal_GetImeisByUin(long uin, int fwVersion, int pad, bool filterByPlatform);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetImeisByUin(AsyncCallback callback, object state, long uin, int fwVersion, int pad, bool filterByPlatform);
      List<string> End_Internal_GetImeisByUin(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据Sid或者IMEI更新安装软件隐藏状态
      /// </summary>
      /// <param name="imeis"></param>
      /// <param name="identifiers"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="hideStatus"></param>
      void Internal_UpdateInstalledSoftHideStatusByImei(List<string> imeis, List<string> identifiers, int fwVersion, int pad, int hideStatus);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_UpdateInstalledSoftHideStatusByImei(AsyncCallback callback, object state, List<string> imeis, List<string> identifiers, int fwVersion, int pad, int hideStatus);
      void End_Internal_UpdateInstalledSoftHideStatusByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据uin和当前IMEI获取已安装软件个数
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="enableCache"></param>
      int Internal_GetInstalledSoftCountByUin(long uin, string imei, int fwVersion, int pad, bool enableCache);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetInstalledSoftCountByUin(AsyncCallback callback, object state, long uin, string imei, int fwVersion, int pad, bool enableCache);
      int End_Internal_GetInstalledSoftCountByUin(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 清空Reids上的用户已安装软件
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="platform"></param>
      void Internal_ClearUserSoftware(string imei, int platform);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_ClearUserSoftware(AsyncCallback callback, object state, string imei, int platform);
      void End_Internal_ClearUserSoftware(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取喜欢不喜欢软件列表(测试)
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      byte[] Internal_GetLikeOrNotSofts(long uin, string imei, int fwVersion, int pad);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetLikeOrNotSofts(AsyncCallback callback, object state, long uin, string imei, int fwVersion, int pad);
      byte[] End_Internal_GetLikeOrNotSofts(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI获取隐藏的已安装软件
      /// </summary>
      /// <param name="imeis"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="pagesize"></param>
      /// <param name="pageindex"></param>
      /// <param name="installedStatus"></param>
      byte[] Internal_GetInstalledSoftHideStatusByImeis(List<string> imeis, int fwVersion, int pad, int pagesize, int pageindex, int installedStatus);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetInstalledSoftHideStatusByImeis(AsyncCallback callback, object state, List<string> imeis, int fwVersion, int pad, int pagesize, int pageindex, int installedStatus);
      byte[] End_Internal_GetInstalledSoftHideStatusByImeis(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取可过滤软件列表(测试)
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      byte[] Internal_GetFilterableSoft(string imei, int fwVersion, int pad);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetFilterableSoft(AsyncCallback callback, object state, string imei, int fwVersion, int pad);
      byte[] End_Internal_GetFilterableSoft(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取(key:0)已安装软件 和 (key:1)已卸载软件 数据量
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      Dictionary<int, int> Internal_GetInstalledAndUnInstalledCount(string imei, int fwVersion, int pad);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetInstalledAndUnInstalledCount(AsyncCallback callback, object state, string imei, int fwVersion, int pad);
      Dictionary<int, int> End_Internal_GetInstalledAndUnInstalledCount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取用户已安装软件
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      byte[] Internal_GetInstalledSofts(string imei, int fwVersion, int pad);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetInstalledSofts(AsyncCallback callback, object state, string imei, int fwVersion, int pad);
      byte[] End_Internal_GetInstalledSofts(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据IMEI获取最早收集时间
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      byte[] Internal_GetEarliestTimeGatherTime(string imei, int fwVersion, int pad);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetEarliestTimeGatherTime(AsyncCallback callback, object state, string imei, int fwVersion, int pad);
      byte[] End_Internal_GetEarliestTimeGatherTime(IAsyncResult asyncResult);
      #endif
      /// <summary>
      ///  依据用户推荐相关主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      byte[] Internal_GetRecommendThemesByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetRecommendThemesByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks);
      byte[] End_Internal_GetRecommendThemesByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      ///  依据用户推荐相关主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      byte[] Internal_GetRecommendThemeV6sByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetRecommendThemeV6sByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks);
      byte[] End_Internal_GetRecommendThemeV6sByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      byte[] Internal_GetGoodRecommendThemesByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetGoodRecommendThemesByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks);
      byte[] End_Internal_GetGoodRecommendThemesByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      byte[] Internal_GetGoodRecommendThemeV6sByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetGoodRecommendThemeV6sByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks);
      byte[] End_Internal_GetGoodRecommendThemeV6sByImei(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据主题ID推荐相关主题(默认: 优先关联, 再相似)
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @param i32 arithmetic - 0 - 优先关联, 再相似; 1 - 相似算法
      /// @param i32  channel - 渠道
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="fwVersion"></param>
      /// <param name="themeId"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="arithmetic"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      byte[] Internal_GetRecommendThemesByThemeId(int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetRecommendThemesByThemeId(AsyncCallback callback, object state, int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks);
      byte[] End_Internal_GetRecommendThemesByThemeId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 依据主题ID推荐相关主题(默认: 优先关联, 再相似)
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @param i32 arithmetic - 0 - 优先关联, 再相似; 1 - 相似算法
      /// @param i32  channel - 渠道
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="fwVersion"></param>
      /// <param name="themeId"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="arithmetic"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      byte[] Internal_GetRecommendThemeV6sByThemeId(int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetRecommendThemeV6sByThemeId(AsyncCallback callback, object state, int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks);
      byte[] End_Internal_GetRecommendThemeV6sByThemeId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题Id获取主题
      /// @param i32 themeId - 主题Id
      /// </summary>
      /// <param name="fwVersion"></param>
      /// <param name="themeId"></param>
      byte[] Internal_GetThemeV6ByThemeId(int fwVersion, long themeId);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetThemeV6ByThemeId(AsyncCallback callback, object state, int fwVersion, long themeId);
      byte[] End_Internal_GetThemeV6ByThemeId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据主题Id生成推荐主题
      /// </summary>
      /// <param name="themeId"></param>
      int Internal_CalculateThemeRecommendById(int themeId);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_CalculateThemeRecommendById(AsyncCallback callback, object state, int themeId);
      int End_Internal_CalculateThemeRecommendById(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据参数刷新索引,返回0:成功,1:失败
      /// @param string file - 刷新的文件
      /// @param i32 arithmetic - 0 - 刷新配置; 1 - 刷新软件 2 - 刷新主题
      /// </summary>
      /// <param name="file"></param>
      /// <param name="type"></param>
      int Internal_RefreshIdx(string file, int type);
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_RefreshIdx(AsyncCallback callback, object state, string file, int type);
      int End_Internal_RefreshIdx(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取配置参数
      /// </summary>
      string Internal_GetConfig();
      #if SILVERLIGHT
      IAsyncResult Begin_Internal_GetConfig(AsyncCallback callback, object state);
      string End_Internal_GetConfig(IAsyncResult asyncResult);
      #endif
    }

    public interface Interface : Iface, IDisposable {
    }
    /// <summary>
    /// 主题、软件推荐服务
    /// </summary>
    public class Client : TServiceClient, Interface {
      public Client(TProtocol prot) : base(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      protected int seqid_;

      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSoftRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit, bool guessAgain)
      {
        return send_GetSoftRecommendByImei(callback, state, imei, fwVersion, pad, categoryIds, excludeCategoryIds, size, project, isLimit, guessAgain);
      }

      public byte[] End_GetSoftRecommendByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSoftRecommendByImei();
      }

      #endif

      /// <summary>
      /// 根据IMEI推荐软件
      /// @param string imei - imei
      /// @param i32 fwVersion - 版本号
      /// @param i32 pad - 设备类型（平板或手机）
      /// @param list<i32> categoryIds - 包含类别
      /// @param list<i32> excludeCategoryIds - 排除类别
      /// @param i32 size - 获取条数
      /// @param i32 project - 项目编号
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param bool guessAgain - 再猜一次
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="size"></param>
      /// <param name="project"></param>
      /// <param name="isLimit"></param>
      /// <param name="guessAgain"></param>
      public byte[] GetSoftRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit, bool guessAgain)
      {
        #if !SILVERLIGHT
        send_GetSoftRecommendByImei(imei, fwVersion, pad, categoryIds, excludeCategoryIds, size, project, isLimit, guessAgain);
        return recv_GetSoftRecommendByImei();

        #else
        var asyncResult = Begin_GetSoftRecommendByImei(null, null, imei, fwVersion, pad, categoryIds, excludeCategoryIds, size, project, isLimit, guessAgain);
        return End_GetSoftRecommendByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSoftRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit, bool guessAgain)
      #else
      public void send_GetSoftRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit, bool guessAgain)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSoftRecommendByImei", TMessageType.Call, seqid_));
        GetSoftRecommendByImei_args args = new GetSoftRecommendByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.size = size;
        args.project = project;
        args.isLimit = isLimit;
        args.guessAgain = guessAgain;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetSoftRecommendByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSoftRecommendByImei_result result = new GetSoftRecommendByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSoftRecommendByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSoftRecommendWithFilterByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      {
        return send_GetSoftRecommendWithFilterByImei(callback, state, imei, fwVersion, pad, categoryIds, excludeCategoryIds, size, project, isLimit);
      }

      public byte[] End_GetSoftRecommendWithFilterByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSoftRecommendWithFilterByImei();
      }

      #endif

      /// <summary>
      /// 根据IMEI获取推荐软件(过滤已展示多次的软件)
      /// @param string imei - imei
      /// @param i32 fwVersion - 版本号
      /// @param i32 pad - 设备类型（平板或手机）
      /// @param list<i32> categoryIds - 包含类别
      /// @param list<i32> excludeCategoryIds - 排除类别
      /// @param i32 size - 获取条数
      /// @param i32 project - 项目编号
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="size"></param>
      /// <param name="project"></param>
      /// <param name="isLimit"></param>
      public byte[] GetSoftRecommendWithFilterByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      {
        #if !SILVERLIGHT
        send_GetSoftRecommendWithFilterByImei(imei, fwVersion, pad, categoryIds, excludeCategoryIds, size, project, isLimit);
        return recv_GetSoftRecommendWithFilterByImei();

        #else
        var asyncResult = Begin_GetSoftRecommendWithFilterByImei(null, null, imei, fwVersion, pad, categoryIds, excludeCategoryIds, size, project, isLimit);
        return End_GetSoftRecommendWithFilterByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSoftRecommendWithFilterByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      #else
      public void send_GetSoftRecommendWithFilterByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSoftRecommendWithFilterByImei", TMessageType.Call, seqid_));
        GetSoftRecommendWithFilterByImei_args args = new GetSoftRecommendWithFilterByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.size = size;
        args.project = project;
        args.isLimit = isLimit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetSoftRecommendWithFilterByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSoftRecommendWithFilterByImei_result result = new GetSoftRecommendWithFilterByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSoftRecommendWithFilterByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRecommendSoftsBySoftId(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      {
        return send_GetRecommendSoftsBySoftId(callback, state, imei, fwVersion, pad, softId, categoryIds, excludeCategoryIds, size, project, isLimit);
      }

      public byte[] End_GetRecommendSoftsBySoftId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRecommendSoftsBySoftId();
      }

      #endif

      /// <summary>
      /// 依据软件ID、手机平台推荐相关软件
      /// @param string imei - imei
      /// @param i32 fwVersion - 版本号
      /// @param i32 pad - 设备类型（平板或手机）
      /// @param list<i32> categoryIds - 包含类别
      /// @param list<i32> excludeCategoryIds - 排除类别
      /// @param i32 size - 获取条数
      /// @param i32 project - 项目编号
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softId"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="size"></param>
      /// <param name="project"></param>
      /// <param name="isLimit"></param>
      public byte[] GetRecommendSoftsBySoftId(string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      {
        #if !SILVERLIGHT
        send_GetRecommendSoftsBySoftId(imei, fwVersion, pad, softId, categoryIds, excludeCategoryIds, size, project, isLimit);
        return recv_GetRecommendSoftsBySoftId();

        #else
        var asyncResult = Begin_GetRecommendSoftsBySoftId(null, null, imei, fwVersion, pad, softId, categoryIds, excludeCategoryIds, size, project, isLimit);
        return End_GetRecommendSoftsBySoftId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRecommendSoftsBySoftId(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      #else
      public void send_GetRecommendSoftsBySoftId(string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRecommendSoftsBySoftId", TMessageType.Call, seqid_));
        GetRecommendSoftsBySoftId_args args = new GetRecommendSoftsBySoftId_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.softId = softId;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.size = size;
        args.project = project;
        args.isLimit = isLimit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetRecommendSoftsBySoftId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRecommendSoftsBySoftId_result result = new GetRecommendSoftsBySoftId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRecommendSoftsBySoftId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRecommendSoftsBySoftIdentifier(AsyncCallback callback, object state, string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      {
        return send_GetRecommendSoftsBySoftIdentifier(callback, state, imei, fwVersion, pad, softIndentifier, categoryIds, excludeCategoryIds, size, project, isLimit);
      }

      public byte[] End_GetRecommendSoftsBySoftIdentifier(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRecommendSoftsBySoftIdentifier();
      }

      #endif

      /// <summary>
      /// 依据软件Identifier、手机平台推荐相关软件
      /// @param string imei - imei
      /// @param i32 fwVersion - 版本号
      /// @param i32 pad - 设备类型（平板或手机）
      /// @param list<i32> categoryIds - 包含类别
      /// @param list<i32> excludeCategoryIds - 排除类别
      /// @param i32 size - 获取条数
      /// @param i32 project - 项目编号
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softIndentifier"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="size"></param>
      /// <param name="project"></param>
      /// <param name="isLimit"></param>
      public byte[] GetRecommendSoftsBySoftIdentifier(string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      {
        #if !SILVERLIGHT
        send_GetRecommendSoftsBySoftIdentifier(imei, fwVersion, pad, softIndentifier, categoryIds, excludeCategoryIds, size, project, isLimit);
        return recv_GetRecommendSoftsBySoftIdentifier();

        #else
        var asyncResult = Begin_GetRecommendSoftsBySoftIdentifier(null, null, imei, fwVersion, pad, softIndentifier, categoryIds, excludeCategoryIds, size, project, isLimit);
        return End_GetRecommendSoftsBySoftIdentifier(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRecommendSoftsBySoftIdentifier(AsyncCallback callback, object state, string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      #else
      public void send_GetRecommendSoftsBySoftIdentifier(string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int size, int project, bool isLimit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRecommendSoftsBySoftIdentifier", TMessageType.Call, seqid_));
        GetRecommendSoftsBySoftIdentifier_args args = new GetRecommendSoftsBySoftIdentifier_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.softIndentifier = softIndentifier;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.size = size;
        args.project = project;
        args.isLimit = isLimit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetRecommendSoftsBySoftIdentifier()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRecommendSoftsBySoftIdentifier_result result = new GetRecommendSoftsBySoftIdentifier_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRecommendSoftsBySoftIdentifier failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeRecommendUserUse(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd)
      {
        return send_GetThemeRecommendUserUse(callback, state, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd);
      }

      public byte[] End_GetThemeRecommendUserUse(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeRecommendUserUse();
      }

      #endif

      /// <summary>
      ///  依据用户推荐相关主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      public byte[] GetThemeRecommendUserUse(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd)
      {
        #if !SILVERLIGHT
        send_GetThemeRecommendUserUse(imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd);
        return recv_GetThemeRecommendUserUse();

        #else
        var asyncResult = Begin_GetThemeRecommendUserUse(null, null, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd);
        return End_GetThemeRecommendUserUse(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeRecommendUserUse(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd)
      #else
      public void send_GetThemeRecommendUserUse(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeRecommendUserUse", TMessageType.Call, seqid_));
        GetThemeRecommendUserUse_args args = new GetThemeRecommendUserUse_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.randomSelect = randomSelect;
        args.isAdd = isAdd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeRecommendUserUse()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeRecommendUserUse_result result = new GetThemeRecommendUserUse_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeRecommendUserUse failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeV6RecommendUserUse(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd)
      {
        return send_GetThemeV6RecommendUserUse(callback, state, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd);
      }

      public byte[] End_GetThemeV6RecommendUserUse(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeV6RecommendUserUse();
      }

      #endif

      /// <summary>
      ///  依据用户推荐相关主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      public byte[] GetThemeV6RecommendUserUse(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd)
      {
        #if !SILVERLIGHT
        send_GetThemeV6RecommendUserUse(imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd);
        return recv_GetThemeV6RecommendUserUse();

        #else
        var asyncResult = Begin_GetThemeV6RecommendUserUse(null, null, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd);
        return End_GetThemeV6RecommendUserUse(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeV6RecommendUserUse(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd)
      #else
      public void send_GetThemeV6RecommendUserUse(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeV6RecommendUserUse", TMessageType.Call, seqid_));
        GetThemeV6RecommendUserUse_args args = new GetThemeV6RecommendUserUse_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.randomSelect = randomSelect;
        args.isAdd = isAdd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeV6RecommendUserUse()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeV6RecommendUserUse_result result = new GetThemeV6RecommendUserUse_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeV6RecommendUserUse failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeRecommendUserUseV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        return send_GetThemeRecommendUserUseV2(callback, state, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
      }

      public byte[] End_GetThemeRecommendUserUseV2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeRecommendUserUseV2();
      }

      #endif

      /// <summary>
      ///  依据用户推荐相关主题 (新版)
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      public byte[] GetThemeRecommendUserUseV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        #if !SILVERLIGHT
        send_GetThemeRecommendUserUseV2(imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return recv_GetThemeRecommendUserUseV2();

        #else
        var asyncResult = Begin_GetThemeRecommendUserUseV2(null, null, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return End_GetThemeRecommendUserUseV2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeRecommendUserUseV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #else
      public void send_GetThemeRecommendUserUseV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeRecommendUserUseV2", TMessageType.Call, seqid_));
        GetThemeRecommendUserUseV2_args args = new GetThemeRecommendUserUseV2_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.randomSelect = randomSelect;
        args.isAdd = isAdd;
        args.pid = pid;
        args.clientVer = clientVer;
        args.resType = resType;
        args.pResType = pResType;
        args.minDateTicks = minDateTicks;
        args.proj = proj;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeRecommendUserUseV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeRecommendUserUseV2_result result = new GetThemeRecommendUserUseV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeRecommendUserUseV2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeV6RecommendUserUseV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        return send_GetThemeV6RecommendUserUseV2(callback, state, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
      }

      public byte[] End_GetThemeV6RecommendUserUseV2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeV6RecommendUserUseV2();
      }

      #endif

      /// <summary>
      ///  依据用户推荐相关主题 (新版)
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      public byte[] GetThemeV6RecommendUserUseV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        #if !SILVERLIGHT
        send_GetThemeV6RecommendUserUseV2(imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return recv_GetThemeV6RecommendUserUseV2();

        #else
        var asyncResult = Begin_GetThemeV6RecommendUserUseV2(null, null, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return End_GetThemeV6RecommendUserUseV2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeV6RecommendUserUseV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #else
      public void send_GetThemeV6RecommendUserUseV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeV6RecommendUserUseV2", TMessageType.Call, seqid_));
        GetThemeV6RecommendUserUseV2_args args = new GetThemeV6RecommendUserUseV2_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.randomSelect = randomSelect;
        args.isAdd = isAdd;
        args.pid = pid;
        args.clientVer = clientVer;
        args.resType = resType;
        args.pResType = pResType;
        args.minDateTicks = minDateTicks;
        args.proj = proj;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeV6RecommendUserUseV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeV6RecommendUserUseV2_result result = new GetThemeV6RecommendUserUseV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeV6RecommendUserUseV2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGoodThemeRecommendUser(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption)
      {
        return send_GetGoodThemeRecommendUser(callback, state, imei, fwVersion, slicenumber, mlicenumber, overTimeOption);
      }

      public byte[] End_GetGoodThemeRecommendUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGoodThemeRecommendUser();
      }

      #endif

      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      public byte[] GetGoodThemeRecommendUser(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption)
      {
        #if !SILVERLIGHT
        send_GetGoodThemeRecommendUser(imei, fwVersion, slicenumber, mlicenumber, overTimeOption);
        return recv_GetGoodThemeRecommendUser();

        #else
        var asyncResult = Begin_GetGoodThemeRecommendUser(null, null, imei, fwVersion, slicenumber, mlicenumber, overTimeOption);
        return End_GetGoodThemeRecommendUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGoodThemeRecommendUser(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption)
      #else
      public void send_GetGoodThemeRecommendUser(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGoodThemeRecommendUser", TMessageType.Call, seqid_));
        GetGoodThemeRecommendUser_args args = new GetGoodThemeRecommendUser_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.overTimeOption = overTimeOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetGoodThemeRecommendUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGoodThemeRecommendUser_result result = new GetGoodThemeRecommendUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGoodThemeRecommendUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGoodThemeV6RecommendUser(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption)
      {
        return send_GetGoodThemeV6RecommendUser(callback, state, imei, fwVersion, slicenumber, mlicenumber, overTimeOption);
      }

      public byte[] End_GetGoodThemeV6RecommendUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGoodThemeV6RecommendUser();
      }

      #endif

      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      public byte[] GetGoodThemeV6RecommendUser(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption)
      {
        #if !SILVERLIGHT
        send_GetGoodThemeV6RecommendUser(imei, fwVersion, slicenumber, mlicenumber, overTimeOption);
        return recv_GetGoodThemeV6RecommendUser();

        #else
        var asyncResult = Begin_GetGoodThemeV6RecommendUser(null, null, imei, fwVersion, slicenumber, mlicenumber, overTimeOption);
        return End_GetGoodThemeV6RecommendUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGoodThemeV6RecommendUser(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption)
      #else
      public void send_GetGoodThemeV6RecommendUser(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGoodThemeV6RecommendUser", TMessageType.Call, seqid_));
        GetGoodThemeV6RecommendUser_args args = new GetGoodThemeV6RecommendUser_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.overTimeOption = overTimeOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetGoodThemeV6RecommendUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGoodThemeV6RecommendUser_result result = new GetGoodThemeV6RecommendUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGoodThemeV6RecommendUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGoodThemeRecommendUserV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        return send_GetGoodThemeRecommendUserV2(callback, state, imei, fwVersion, slicenumber, mlicenumber, overTimeOption, pid, clientVer, resType, pResType, minDateTicks, proj);
      }

      public byte[] End_GetGoodThemeRecommendUserV2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGoodThemeRecommendUserV2();
      }

      #endif

      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      public byte[] GetGoodThemeRecommendUserV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        #if !SILVERLIGHT
        send_GetGoodThemeRecommendUserV2(imei, fwVersion, slicenumber, mlicenumber, overTimeOption, pid, clientVer, resType, pResType, minDateTicks, proj);
        return recv_GetGoodThemeRecommendUserV2();

        #else
        var asyncResult = Begin_GetGoodThemeRecommendUserV2(null, null, imei, fwVersion, slicenumber, mlicenumber, overTimeOption, pid, clientVer, resType, pResType, minDateTicks, proj);
        return End_GetGoodThemeRecommendUserV2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGoodThemeRecommendUserV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #else
      public void send_GetGoodThemeRecommendUserV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGoodThemeRecommendUserV2", TMessageType.Call, seqid_));
        GetGoodThemeRecommendUserV2_args args = new GetGoodThemeRecommendUserV2_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.overTimeOption = overTimeOption;
        args.pid = pid;
        args.clientVer = clientVer;
        args.resType = resType;
        args.pResType = pResType;
        args.minDateTicks = minDateTicks;
        args.proj = proj;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetGoodThemeRecommendUserV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGoodThemeRecommendUserV2_result result = new GetGoodThemeRecommendUserV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGoodThemeRecommendUserV2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGoodThemeV6RecommendUserV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        return send_GetGoodThemeV6RecommendUserV2(callback, state, imei, fwVersion, slicenumber, mlicenumber, overTimeOption, pid, clientVer, resType, pResType, minDateTicks, proj);
      }

      public byte[] End_GetGoodThemeV6RecommendUserV2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGoodThemeV6RecommendUserV2();
      }

      #endif

      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      public byte[] GetGoodThemeV6RecommendUserV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        #if !SILVERLIGHT
        send_GetGoodThemeV6RecommendUserV2(imei, fwVersion, slicenumber, mlicenumber, overTimeOption, pid, clientVer, resType, pResType, minDateTicks, proj);
        return recv_GetGoodThemeV6RecommendUserV2();

        #else
        var asyncResult = Begin_GetGoodThemeV6RecommendUserV2(null, null, imei, fwVersion, slicenumber, mlicenumber, overTimeOption, pid, clientVer, resType, pResType, minDateTicks, proj);
        return End_GetGoodThemeV6RecommendUserV2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGoodThemeV6RecommendUserV2(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #else
      public void send_GetGoodThemeV6RecommendUserV2(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGoodThemeV6RecommendUserV2", TMessageType.Call, seqid_));
        GetGoodThemeV6RecommendUserV2_args args = new GetGoodThemeV6RecommendUserV2_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.overTimeOption = overTimeOption;
        args.pid = pid;
        args.clientVer = clientVer;
        args.resType = resType;
        args.pResType = pResType;
        args.minDateTicks = minDateTicks;
        args.proj = proj;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetGoodThemeV6RecommendUserV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGoodThemeV6RecommendUserV2_result result = new GetGoodThemeV6RecommendUserV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGoodThemeV6RecommendUserV2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeRecommendThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      {
        return send_GetThemeRecommendThemeId(callback, state, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
      }

      public byte[] End_GetThemeRecommendThemeId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeRecommendThemeId();
      }

      #endif

      /// <summary>
      /// 根据主题ID获取关联主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      public byte[] GetThemeRecommendThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      {
        #if !SILVERLIGHT
        send_GetThemeRecommendThemeId(themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
        return recv_GetThemeRecommendThemeId();

        #else
        var asyncResult = Begin_GetThemeRecommendThemeId(null, null, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
        return End_GetThemeRecommendThemeId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeRecommendThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      #else
      public void send_GetThemeRecommendThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeRecommendThemeId", TMessageType.Call, seqid_));
        GetThemeRecommendThemeId_args args = new GetThemeRecommendThemeId_args();
        args.themeId = themeId;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeRecommendThemeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeRecommendThemeId_result result = new GetThemeRecommendThemeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeRecommendThemeId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeV6RecommendThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      {
        return send_GetThemeV6RecommendThemeId(callback, state, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
      }

      public byte[] End_GetThemeV6RecommendThemeId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeV6RecommendThemeId();
      }

      #endif

      /// <summary>
      /// 根据主题ID获取关联主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      public byte[] GetThemeV6RecommendThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      {
        #if !SILVERLIGHT
        send_GetThemeV6RecommendThemeId(themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
        return recv_GetThemeV6RecommendThemeId();

        #else
        var asyncResult = Begin_GetThemeV6RecommendThemeId(null, null, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
        return End_GetThemeV6RecommendThemeId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeV6RecommendThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      #else
      public void send_GetThemeV6RecommendThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeV6RecommendThemeId", TMessageType.Call, seqid_));
        GetThemeV6RecommendThemeId_args args = new GetThemeV6RecommendThemeId_args();
        args.themeId = themeId;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeV6RecommendThemeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeV6RecommendThemeId_result result = new GetThemeV6RecommendThemeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeV6RecommendThemeId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeRecommendThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        return send_GetThemeRecommendThemeIdV2(callback, state, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
      }

      public byte[] End_GetThemeRecommendThemeIdV2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeRecommendThemeIdV2();
      }

      #endif

      /// <summary>
      /// 根据主题ID获取关联主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      public byte[] GetThemeRecommendThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        #if !SILVERLIGHT
        send_GetThemeRecommendThemeIdV2(themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return recv_GetThemeRecommendThemeIdV2();

        #else
        var asyncResult = Begin_GetThemeRecommendThemeIdV2(null, null, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return End_GetThemeRecommendThemeIdV2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeRecommendThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #else
      public void send_GetThemeRecommendThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeRecommendThemeIdV2", TMessageType.Call, seqid_));
        GetThemeRecommendThemeIdV2_args args = new GetThemeRecommendThemeIdV2_args();
        args.themeId = themeId;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.pid = pid;
        args.clientVer = clientVer;
        args.resType = resType;
        args.pResType = pResType;
        args.minDateTicks = minDateTicks;
        args.proj = proj;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeRecommendThemeIdV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeRecommendThemeIdV2_result result = new GetThemeRecommendThemeIdV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeRecommendThemeIdV2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeV6RecommendThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        return send_GetThemeV6RecommendThemeIdV2(callback, state, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
      }

      public byte[] End_GetThemeV6RecommendThemeIdV2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeV6RecommendThemeIdV2();
      }

      #endif

      /// <summary>
      /// 根据主题ID获取关联主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      public byte[] GetThemeV6RecommendThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        #if !SILVERLIGHT
        send_GetThemeV6RecommendThemeIdV2(themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return recv_GetThemeV6RecommendThemeIdV2();

        #else
        var asyncResult = Begin_GetThemeV6RecommendThemeIdV2(null, null, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return End_GetThemeV6RecommendThemeIdV2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeV6RecommendThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #else
      public void send_GetThemeV6RecommendThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeV6RecommendThemeIdV2", TMessageType.Call, seqid_));
        GetThemeV6RecommendThemeIdV2_args args = new GetThemeV6RecommendThemeIdV2_args();
        args.themeId = themeId;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.pid = pid;
        args.clientVer = clientVer;
        args.resType = resType;
        args.pResType = pResType;
        args.minDateTicks = minDateTicks;
        args.proj = proj;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeV6RecommendThemeIdV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeV6RecommendThemeIdV2_result result = new GetThemeV6RecommendThemeIdV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeV6RecommendThemeIdV2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeSimilarThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      {
        return send_GetThemeSimilarThemeId(callback, state, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
      }

      public byte[] End_GetThemeSimilarThemeId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeSimilarThemeId();
      }

      #endif

      /// <summary>
      /// 根据主题ID获取相似主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      public byte[] GetThemeSimilarThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      {
        #if !SILVERLIGHT
        send_GetThemeSimilarThemeId(themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
        return recv_GetThemeSimilarThemeId();

        #else
        var asyncResult = Begin_GetThemeSimilarThemeId(null, null, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
        return End_GetThemeSimilarThemeId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeSimilarThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      #else
      public void send_GetThemeSimilarThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeSimilarThemeId", TMessageType.Call, seqid_));
        GetThemeSimilarThemeId_args args = new GetThemeSimilarThemeId_args();
        args.themeId = themeId;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeSimilarThemeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeSimilarThemeId_result result = new GetThemeSimilarThemeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeSimilarThemeId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeV6SimilarThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      {
        return send_GetThemeV6SimilarThemeId(callback, state, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
      }

      public byte[] End_GetThemeV6SimilarThemeId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeV6SimilarThemeId();
      }

      #endif

      /// <summary>
      /// 根据主题ID获取相似主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      public byte[] GetThemeV6SimilarThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      {
        #if !SILVERLIGHT
        send_GetThemeV6SimilarThemeId(themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
        return recv_GetThemeV6SimilarThemeId();

        #else
        var asyncResult = Begin_GetThemeV6SimilarThemeId(null, null, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd);
        return End_GetThemeV6SimilarThemeId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeV6SimilarThemeId(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      #else
      public void send_GetThemeV6SimilarThemeId(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeV6SimilarThemeId", TMessageType.Call, seqid_));
        GetThemeV6SimilarThemeId_args args = new GetThemeV6SimilarThemeId_args();
        args.themeId = themeId;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeV6SimilarThemeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeV6SimilarThemeId_result result = new GetThemeV6SimilarThemeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeV6SimilarThemeId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeSimilarThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        return send_GetThemeSimilarThemeIdV2(callback, state, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
      }

      public byte[] End_GetThemeSimilarThemeIdV2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeSimilarThemeIdV2();
      }

      #endif

      /// <summary>
      /// 根据主题ID获取相似主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      public byte[] GetThemeSimilarThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        #if !SILVERLIGHT
        send_GetThemeSimilarThemeIdV2(themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return recv_GetThemeSimilarThemeIdV2();

        #else
        var asyncResult = Begin_GetThemeSimilarThemeIdV2(null, null, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return End_GetThemeSimilarThemeIdV2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeSimilarThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #else
      public void send_GetThemeSimilarThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeSimilarThemeIdV2", TMessageType.Call, seqid_));
        GetThemeSimilarThemeIdV2_args args = new GetThemeSimilarThemeIdV2_args();
        args.themeId = themeId;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.pid = pid;
        args.clientVer = clientVer;
        args.resType = resType;
        args.pResType = pResType;
        args.minDateTicks = minDateTicks;
        args.proj = proj;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeSimilarThemeIdV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeSimilarThemeIdV2_result result = new GetThemeSimilarThemeIdV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeSimilarThemeIdV2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetThemeV6SimilarThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        return send_GetThemeV6SimilarThemeIdV2(callback, state, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
      }

      public byte[] End_GetThemeV6SimilarThemeIdV2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetThemeV6SimilarThemeIdV2();
      }

      #endif

      /// <summary>
      /// 根据主题ID获取相似主题推荐
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="themeId"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="pid"></param>
      /// <param name="clientVer"></param>
      /// <param name="resType"></param>
      /// <param name="pResType"></param>
      /// <param name="minDateTicks"></param>
      /// <param name="proj"></param>
      public byte[] GetThemeV6SimilarThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      {
        #if !SILVERLIGHT
        send_GetThemeV6SimilarThemeIdV2(themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return recv_GetThemeV6SimilarThemeIdV2();

        #else
        var asyncResult = Begin_GetThemeV6SimilarThemeIdV2(null, null, themeId, fwVersion, slicenumber, mlicenumber, timeOption, isAdd, pid, clientVer, resType, pResType, minDateTicks, proj);
        return End_GetThemeV6SimilarThemeIdV2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetThemeV6SimilarThemeIdV2(AsyncCallback callback, object state, long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #else
      public void send_GetThemeV6SimilarThemeIdV2(long themeId, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int pid, int clientVer, int resType, int pResType, long minDateTicks, int proj)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetThemeV6SimilarThemeIdV2", TMessageType.Call, seqid_));
        GetThemeV6SimilarThemeIdV2_args args = new GetThemeV6SimilarThemeIdV2_args();
        args.themeId = themeId;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.pid = pid;
        args.clientVer = clientVer;
        args.resType = resType;
        args.pResType = pResType;
        args.minDateTicks = minDateTicks;
        args.proj = proj;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetThemeV6SimilarThemeIdV2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetThemeV6SimilarThemeIdV2_result result = new GetThemeV6SimilarThemeIdV2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetThemeV6SimilarThemeIdV2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CalculateThemeRecommendById(AsyncCallback callback, object state, int themeId)
      {
        return send_CalculateThemeRecommendById(callback, state, themeId);
      }

      public int End_CalculateThemeRecommendById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CalculateThemeRecommendById();
      }

      #endif

      /// <summary>
      /// 计算新上架主题的推荐
      /// </summary>
      /// <param name="themeId"></param>
      public int CalculateThemeRecommendById(int themeId)
      {
        #if !SILVERLIGHT
        send_CalculateThemeRecommendById(themeId);
        return recv_CalculateThemeRecommendById();

        #else
        var asyncResult = Begin_CalculateThemeRecommendById(null, null, themeId);
        return End_CalculateThemeRecommendById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CalculateThemeRecommendById(AsyncCallback callback, object state, int themeId)
      #else
      public void send_CalculateThemeRecommendById(int themeId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CalculateThemeRecommendById", TMessageType.Call, seqid_));
        CalculateThemeRecommendById_args args = new CalculateThemeRecommendById_args();
        args.themeId = themeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_CalculateThemeRecommendById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CalculateThemeRecommendById_result result = new CalculateThemeRecommendById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CalculateThemeRecommendById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetInstalledSoftIdentifiersByImei(AsyncCallback callback, object state, string imei, int platform, int isUninstalled)
      {
        return send_GetInstalledSoftIdentifiersByImei(callback, state, imei, platform, isUninstalled);
      }

      public List<string> End_GetInstalledSoftIdentifiersByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetInstalledSoftIdentifiersByImei();
      }

      #endif

      /// <summary>
      /// 根据IMEI，返回所有安装过的软件Identifier
      /// @param string imei - 用户IMEI
      /// @param i32 platform - 平台
      /// @param i32 isUninstalled - -1:全部软件; 0:已安装软件; 1:已卸载软件
      /// @return list<string> - Identifier列表
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="platform"></param>
      /// <param name="isUninstalled"></param>
      public List<string> GetInstalledSoftIdentifiersByImei(string imei, int platform, int isUninstalled)
      {
        #if !SILVERLIGHT
        send_GetInstalledSoftIdentifiersByImei(imei, platform, isUninstalled);
        return recv_GetInstalledSoftIdentifiersByImei();

        #else
        var asyncResult = Begin_GetInstalledSoftIdentifiersByImei(null, null, imei, platform, isUninstalled);
        return End_GetInstalledSoftIdentifiersByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetInstalledSoftIdentifiersByImei(AsyncCallback callback, object state, string imei, int platform, int isUninstalled)
      #else
      public void send_GetInstalledSoftIdentifiersByImei(string imei, int platform, int isUninstalled)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetInstalledSoftIdentifiersByImei", TMessageType.Call, seqid_));
        GetInstalledSoftIdentifiersByImei_args args = new GetInstalledSoftIdentifiersByImei_args();
        args.imei = imei;
        args.platform = platform;
        args.isUninstalled = isUninstalled;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetInstalledSoftIdentifiersByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetInstalledSoftIdentifiersByImei_result result = new GetInstalledSoftIdentifiersByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetInstalledSoftIdsByImei(AsyncCallback callback, object state, string imei, int platform, int isUninstalled)
      {
        return send_GetInstalledSoftIdsByImei(callback, state, imei, platform, isUninstalled);
      }

      public List<int> End_GetInstalledSoftIdsByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetInstalledSoftIdsByImei();
      }

      #endif

      /// <summary>
      /// 根据IMEI，返回所有安装过的软件Identifier_int
      /// @param string imei - 用户IMEI
      /// @param i32 platform - 平台
      /// @param i32 isUninstalled - -1:全部软件; 0:已安装软件; 1:已卸载软件
      /// @return list<i32> - Identifier_int列表
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="platform"></param>
      /// <param name="isUninstalled"></param>
      public List<int> GetInstalledSoftIdsByImei(string imei, int platform, int isUninstalled)
      {
        #if !SILVERLIGHT
        send_GetInstalledSoftIdsByImei(imei, platform, isUninstalled);
        return recv_GetInstalledSoftIdsByImei();

        #else
        var asyncResult = Begin_GetInstalledSoftIdsByImei(null, null, imei, platform, isUninstalled);
        return End_GetInstalledSoftIdsByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetInstalledSoftIdsByImei(AsyncCallback callback, object state, string imei, int platform, int isUninstalled)
      #else
      public void send_GetInstalledSoftIdsByImei(string imei, int platform, int isUninstalled)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetInstalledSoftIdsByImei", TMessageType.Call, seqid_));
        GetInstalledSoftIdsByImei_args args = new GetInstalledSoftIdsByImei_args();
        args.imei = imei;
        args.platform = platform;
        args.isUninstalled = isUninstalled;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<int> recv_GetInstalledSoftIdsByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetInstalledSoftIdsByImei_result result = new GetInstalledSoftIdsByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetInstalledSoftIdentifiersByUin(AsyncCallback callback, object state, long uin, int platform, List<string> excludeImeis)
      {
        return send_GetInstalledSoftIdentifiersByUin(callback, state, uin, platform, excludeImeis);
      }

      public List<string> End_GetInstalledSoftIdentifiersByUin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetInstalledSoftIdentifiersByUin();
      }

      #endif

      /// <summary>
      /// * 根据uin，返回所有安装过的软件Identifier
      /// * @param i64 uin - 用户uin
      /// * @param i32 platform - 平台
      /// * @param list<string> excludeImeis - 需排除的IMEI列表
      ///    * @return list<string> - Identifier列表
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="platform"></param>
      /// <param name="excludeImeis"></param>
      public List<string> GetInstalledSoftIdentifiersByUin(long uin, int platform, List<string> excludeImeis)
      {
        #if !SILVERLIGHT
        send_GetInstalledSoftIdentifiersByUin(uin, platform, excludeImeis);
        return recv_GetInstalledSoftIdentifiersByUin();

        #else
        var asyncResult = Begin_GetInstalledSoftIdentifiersByUin(null, null, uin, platform, excludeImeis);
        return End_GetInstalledSoftIdentifiersByUin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetInstalledSoftIdentifiersByUin(AsyncCallback callback, object state, long uin, int platform, List<string> excludeImeis)
      #else
      public void send_GetInstalledSoftIdentifiersByUin(long uin, int platform, List<string> excludeImeis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetInstalledSoftIdentifiersByUin", TMessageType.Call, seqid_));
        GetInstalledSoftIdentifiersByUin_args args = new GetInstalledSoftIdentifiersByUin_args();
        args.uin = uin;
        args.platform = platform;
        args.excludeImeis = excludeImeis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetInstalledSoftIdentifiersByUin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetInstalledSoftIdentifiersByUin_result result = new GetInstalledSoftIdentifiersByUin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetInstalledSoftIdsByUin(AsyncCallback callback, object state, long uin, int platform, List<string> excludeImeis)
      {
        return send_GetInstalledSoftIdsByUin(callback, state, uin, platform, excludeImeis);
      }

      public List<int> End_GetInstalledSoftIdsByUin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetInstalledSoftIdsByUin();
      }

      #endif

      /// <summary>
      /// 根据uin，返回所有安装过的软件Identifier_int
      /// @param i64 uin - 用户uin
      /// @param i32 platform - 平台
      /// @param list<string> excludeImeis - 需排除的IMEI列表
      /// @return list<i32> - Identifier_int列表
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="platform"></param>
      /// <param name="excludeImeis"></param>
      public List<int> GetInstalledSoftIdsByUin(long uin, int platform, List<string> excludeImeis)
      {
        #if !SILVERLIGHT
        send_GetInstalledSoftIdsByUin(uin, platform, excludeImeis);
        return recv_GetInstalledSoftIdsByUin();

        #else
        var asyncResult = Begin_GetInstalledSoftIdsByUin(null, null, uin, platform, excludeImeis);
        return End_GetInstalledSoftIdsByUin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetInstalledSoftIdsByUin(AsyncCallback callback, object state, long uin, int platform, List<string> excludeImeis)
      #else
      public void send_GetInstalledSoftIdsByUin(long uin, int platform, List<string> excludeImeis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetInstalledSoftIdsByUin", TMessageType.Call, seqid_));
        GetInstalledSoftIdsByUin_args args = new GetInstalledSoftIdsByUin_args();
        args.uin = uin;
        args.platform = platform;
        args.excludeImeis = excludeImeis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<int> recv_GetInstalledSoftIdsByUin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetInstalledSoftIdsByUin_result result = new GetInstalledSoftIdsByUin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetSoftRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu)
      {
        return send_Internal_GetSoftRecommendByImei(callback, state, imei, fwVersion, pad, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, project, isOldVer, processColdBoot, addExplanations, actionType, addIntroReason, guessAgain, uin, filterFilterableSofts, cpu);
      }

      public byte[] End_Internal_GetSoftRecommendByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetSoftRecommendByImei();
      }

      #endif

      /// <summary>
      /// 根据IMEI推荐软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param bool processColdBoot - 是否采用默认数据解决冷启动问题
      /// @param bool addExplanations - 是否返回推荐解释
      /// @param i32 actionType - 接口行为类型
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="project"></param>
      /// <param name="isOldVer"></param>
      /// <param name="processColdBoot"></param>
      /// <param name="addExplanations"></param>
      /// <param name="actionType"></param>
      /// <param name="addIntroReason"></param>
      /// <param name="guessAgain"></param>
      /// <param name="uin"></param>
      /// <param name="filterFilterableSofts"></param>
      /// <param name="cpu"></param>
      public byte[] Internal_GetSoftRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu)
      {
        #if !SILVERLIGHT
        send_Internal_GetSoftRecommendByImei(imei, fwVersion, pad, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, project, isOldVer, processColdBoot, addExplanations, actionType, addIntroReason, guessAgain, uin, filterFilterableSofts, cpu);
        return recv_Internal_GetSoftRecommendByImei();

        #else
        var asyncResult = Begin_Internal_GetSoftRecommendByImei(null, null, imei, fwVersion, pad, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, project, isOldVer, processColdBoot, addExplanations, actionType, addIntroReason, guessAgain, uin, filterFilterableSofts, cpu);
        return End_Internal_GetSoftRecommendByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetSoftRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu)
      #else
      public void send_Internal_GetSoftRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetSoftRecommendByImei", TMessageType.Call, seqid_));
        Internal_GetSoftRecommendByImei_args args = new Internal_GetSoftRecommendByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.count = count;
        args.isLimit = isLimit;
        args.isAuthorize = isAuthorize;
        args.project = project;
        args.isOldVer = isOldVer;
        args.processColdBoot = processColdBoot;
        args.addExplanations = addExplanations;
        args.actionType = actionType;
        args.addIntroReason = addIntroReason;
        args.guessAgain = guessAgain;
        args.uin = uin;
        args.filterFilterableSofts = filterFilterableSofts;
        args.cpu = cpu;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetSoftRecommendByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetSoftRecommendByImei_result result = new Internal_GetSoftRecommendByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetSoftRecommendByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetPushRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu)
      {
        return send_Internal_GetPushRecommendByImei(callback, state, imei, fwVersion, pad, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, project, isOldVer, processColdBoot, addExplanations, actionType, addIntroReason, guessAgain, uin, filterFilterableSofts, cpu);
      }

      public byte[] End_Internal_GetPushRecommendByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetPushRecommendByImei();
      }

      #endif

      /// <summary>
      /// 根据IMEI获取push的推荐软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param bool processColdBoot - 是否采用默认数据解决冷启动问题
      /// @param bool addExplanations - 是否返回推荐解释
      /// @param i32 actionType - 接口行为类型
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="project"></param>
      /// <param name="isOldVer"></param>
      /// <param name="processColdBoot"></param>
      /// <param name="addExplanations"></param>
      /// <param name="actionType"></param>
      /// <param name="addIntroReason"></param>
      /// <param name="guessAgain"></param>
      /// <param name="uin"></param>
      /// <param name="filterFilterableSofts"></param>
      /// <param name="cpu"></param>
      public byte[] Internal_GetPushRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu)
      {
        #if !SILVERLIGHT
        send_Internal_GetPushRecommendByImei(imei, fwVersion, pad, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, project, isOldVer, processColdBoot, addExplanations, actionType, addIntroReason, guessAgain, uin, filterFilterableSofts, cpu);
        return recv_Internal_GetPushRecommendByImei();

        #else
        var asyncResult = Begin_Internal_GetPushRecommendByImei(null, null, imei, fwVersion, pad, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, project, isOldVer, processColdBoot, addExplanations, actionType, addIntroReason, guessAgain, uin, filterFilterableSofts, cpu);
        return End_Internal_GetPushRecommendByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetPushRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu)
      #else
      public void send_Internal_GetPushRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, int project, bool isOldVer, bool processColdBoot, bool addExplanations, int actionType, bool addIntroReason, bool guessAgain, long uin, bool filterFilterableSofts, int cpu)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetPushRecommendByImei", TMessageType.Call, seqid_));
        Internal_GetPushRecommendByImei_args args = new Internal_GetPushRecommendByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.count = count;
        args.isLimit = isLimit;
        args.isAuthorize = isAuthorize;
        args.project = project;
        args.isOldVer = isOldVer;
        args.processColdBoot = processColdBoot;
        args.addExplanations = addExplanations;
        args.actionType = actionType;
        args.addIntroReason = addIntroReason;
        args.guessAgain = guessAgain;
        args.uin = uin;
        args.filterFilterableSofts = filterFilterableSofts;
        args.cpu = cpu;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetPushRecommendByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetPushRecommendByImei_result result = new Internal_GetPushRecommendByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetPushRecommendByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetDirectPushRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, int isAuthorize, int project, bool isOldVer, int actionType, long uin, int cpu)
      {
        return send_Internal_GetDirectPushRecommendByImei(callback, state, imei, fwVersion, pad, categoryIds, excludeCategoryIds, count, isAuthorize, project, isOldVer, actionType, uin, cpu);
      }

      public byte[] End_Internal_GetDirectPushRecommendByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetDirectPushRecommendByImei();
      }

      #endif

      /// <summary>
      /// 根据IMEI获取定向推送的推荐软件
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 actionType - 接口行为类型
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回RecommendSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="project"></param>
      /// <param name="isOldVer"></param>
      /// <param name="actionType"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      public byte[] Internal_GetDirectPushRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, int isAuthorize, int project, bool isOldVer, int actionType, long uin, int cpu)
      {
        #if !SILVERLIGHT
        send_Internal_GetDirectPushRecommendByImei(imei, fwVersion, pad, categoryIds, excludeCategoryIds, count, isAuthorize, project, isOldVer, actionType, uin, cpu);
        return recv_Internal_GetDirectPushRecommendByImei();

        #else
        var asyncResult = Begin_Internal_GetDirectPushRecommendByImei(null, null, imei, fwVersion, pad, categoryIds, excludeCategoryIds, count, isAuthorize, project, isOldVer, actionType, uin, cpu);
        return End_Internal_GetDirectPushRecommendByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetDirectPushRecommendByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, int isAuthorize, int project, bool isOldVer, int actionType, long uin, int cpu)
      #else
      public void send_Internal_GetDirectPushRecommendByImei(string imei, int fwVersion, int pad, List<int> categoryIds, List<int> excludeCategoryIds, int count, int isAuthorize, int project, bool isOldVer, int actionType, long uin, int cpu)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetDirectPushRecommendByImei", TMessageType.Call, seqid_));
        Internal_GetDirectPushRecommendByImei_args args = new Internal_GetDirectPushRecommendByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.count = count;
        args.isAuthorize = isAuthorize;
        args.project = project;
        args.isOldVer = isOldVer;
        args.actionType = actionType;
        args.uin = uin;
        args.cpu = cpu;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetDirectPushRecommendByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetDirectPushRecommendByImei_result result = new Internal_GetDirectPushRecommendByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetDirectPushRecommendByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetRecommendSoftsBySoftId(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project)
      {
        return send_Internal_GetRecommendSoftsBySoftId(callback, state, imei, fwVersion, pad, softId, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, actionType, project);
      }

      public byte[] End_Internal_GetRecommendSoftsBySoftId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetRecommendSoftsBySoftId();
      }

      #endif

      /// <summary>
      /// 依据软件ID、手机平台推荐相关软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 startIndex - 从指定开始位置取推荐
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softId"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="isOldVer"></param>
      /// <param name="startIndex"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      /// <param name="actionType"></param>
      /// <param name="project"></param>
      public byte[] Internal_GetRecommendSoftsBySoftId(string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project)
      {
        #if !SILVERLIGHT
        send_Internal_GetRecommendSoftsBySoftId(imei, fwVersion, pad, softId, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, actionType, project);
        return recv_Internal_GetRecommendSoftsBySoftId();

        #else
        var asyncResult = Begin_Internal_GetRecommendSoftsBySoftId(null, null, imei, fwVersion, pad, softId, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, actionType, project);
        return End_Internal_GetRecommendSoftsBySoftId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetRecommendSoftsBySoftId(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project)
      #else
      public void send_Internal_GetRecommendSoftsBySoftId(string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetRecommendSoftsBySoftId", TMessageType.Call, seqid_));
        Internal_GetRecommendSoftsBySoftId_args args = new Internal_GetRecommendSoftsBySoftId_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.softId = softId;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.count = count;
        args.isLimit = isLimit;
        args.isAuthorize = isAuthorize;
        args.isOldVer = isOldVer;
        args.startIndex = startIndex;
        args.uin = uin;
        args.cpu = cpu;
        args.actionType = actionType;
        args.project = project;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetRecommendSoftsBySoftId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetRecommendSoftsBySoftId_result result = new Internal_GetRecommendSoftsBySoftId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetRecommendSoftsBySoftId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetRecommendSoftsExBySoftId(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project)
      {
        return send_Internal_GetRecommendSoftsExBySoftId(callback, state, imei, fwVersion, pad, softId, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, explanationType, isFillRecommendSofts, actionType, project);
      }

      public byte[] End_Internal_GetRecommendSoftsExBySoftId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetRecommendSoftsExBySoftId();
      }

      #endif

      /// <summary>
      /// 依据软件ID、手机平台推荐相关软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 startIndex - 从指定开始位置取推荐
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softId"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="isOldVer"></param>
      /// <param name="startIndex"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      /// <param name="explanationType"></param>
      /// <param name="isFillRecommendSofts"></param>
      /// <param name="actionType"></param>
      /// <param name="project"></param>
      public byte[] Internal_GetRecommendSoftsExBySoftId(string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project)
      {
        #if !SILVERLIGHT
        send_Internal_GetRecommendSoftsExBySoftId(imei, fwVersion, pad, softId, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, explanationType, isFillRecommendSofts, actionType, project);
        return recv_Internal_GetRecommendSoftsExBySoftId();

        #else
        var asyncResult = Begin_Internal_GetRecommendSoftsExBySoftId(null, null, imei, fwVersion, pad, softId, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, explanationType, isFillRecommendSofts, actionType, project);
        return End_Internal_GetRecommendSoftsExBySoftId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetRecommendSoftsExBySoftId(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project)
      #else
      public void send_Internal_GetRecommendSoftsExBySoftId(string imei, int fwVersion, int pad, int softId, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetRecommendSoftsExBySoftId", TMessageType.Call, seqid_));
        Internal_GetRecommendSoftsExBySoftId_args args = new Internal_GetRecommendSoftsExBySoftId_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.softId = softId;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.count = count;
        args.isLimit = isLimit;
        args.isAuthorize = isAuthorize;
        args.isOldVer = isOldVer;
        args.startIndex = startIndex;
        args.uin = uin;
        args.cpu = cpu;
        args.explanationType = explanationType;
        args.isFillRecommendSofts = isFillRecommendSofts;
        args.actionType = actionType;
        args.project = project;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetRecommendSoftsExBySoftId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetRecommendSoftsExBySoftId_result result = new Internal_GetRecommendSoftsExBySoftId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetRecommendSoftsExBySoftId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetRecommendSoftsBySoftIdentifier(AsyncCallback callback, object state, string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project)
      {
        return send_Internal_GetRecommendSoftsBySoftIdentifier(callback, state, imei, fwVersion, pad, softIndentifier, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, actionType, project);
      }

      public byte[] End_Internal_GetRecommendSoftsBySoftIdentifier(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetRecommendSoftsBySoftIdentifier();
      }

      #endif

      /// <summary>
      /// 依据软件Identifier、手机平台推荐相关软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 startIndex - 从指定开始位置取推荐
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softIndentifier"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="isOldVer"></param>
      /// <param name="startIndex"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      /// <param name="actionType"></param>
      /// <param name="project"></param>
      public byte[] Internal_GetRecommendSoftsBySoftIdentifier(string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project)
      {
        #if !SILVERLIGHT
        send_Internal_GetRecommendSoftsBySoftIdentifier(imei, fwVersion, pad, softIndentifier, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, actionType, project);
        return recv_Internal_GetRecommendSoftsBySoftIdentifier();

        #else
        var asyncResult = Begin_Internal_GetRecommendSoftsBySoftIdentifier(null, null, imei, fwVersion, pad, softIndentifier, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, actionType, project);
        return End_Internal_GetRecommendSoftsBySoftIdentifier(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetRecommendSoftsBySoftIdentifier(AsyncCallback callback, object state, string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project)
      #else
      public void send_Internal_GetRecommendSoftsBySoftIdentifier(string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int actionType, int project)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetRecommendSoftsBySoftIdentifier", TMessageType.Call, seqid_));
        Internal_GetRecommendSoftsBySoftIdentifier_args args = new Internal_GetRecommendSoftsBySoftIdentifier_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.softIndentifier = softIndentifier;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.count = count;
        args.isLimit = isLimit;
        args.isAuthorize = isAuthorize;
        args.isOldVer = isOldVer;
        args.startIndex = startIndex;
        args.uin = uin;
        args.cpu = cpu;
        args.actionType = actionType;
        args.project = project;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetRecommendSoftsBySoftIdentifier()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetRecommendSoftsBySoftIdentifier_result result = new Internal_GetRecommendSoftsBySoftIdentifier_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetRecommendSoftsBySoftIdentifier failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetRecommendSoftsExBySoftIdentifier(AsyncCallback callback, object state, string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project)
      {
        return send_Internal_GetRecommendSoftsExBySoftIdentifier(callback, state, imei, fwVersion, pad, softIndentifier, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, explanationType, isFillRecommendSofts, actionType, project);
      }

      public byte[] End_Internal_GetRecommendSoftsExBySoftIdentifier(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetRecommendSoftsExBySoftIdentifier();
      }

      #endif

      /// <summary>
      /// 依据软件Identifier、手机平台推荐相关软件
      /// @param bool isLimit - 是否限制已超过展示次数的推荐内容
      /// @param i32 isAuthorize - 是否授权
      /// @param bool isOldVer - 是否旧版
      /// @param i32 startIndex - 从指定开始位置取推荐
      /// @param i32 cpu - cpu适配型号
      /// @return binary - 返回SimpleSoft列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="softIndentifier"></param>
      /// <param name="categoryIds"></param>
      /// <param name="excludeCategoryIds"></param>
      /// <param name="count"></param>
      /// <param name="isLimit"></param>
      /// <param name="isAuthorize"></param>
      /// <param name="isOldVer"></param>
      /// <param name="startIndex"></param>
      /// <param name="uin"></param>
      /// <param name="cpu"></param>
      /// <param name="explanationType"></param>
      /// <param name="isFillRecommendSofts"></param>
      /// <param name="actionType"></param>
      /// <param name="project"></param>
      public byte[] Internal_GetRecommendSoftsExBySoftIdentifier(string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project)
      {
        #if !SILVERLIGHT
        send_Internal_GetRecommendSoftsExBySoftIdentifier(imei, fwVersion, pad, softIndentifier, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, explanationType, isFillRecommendSofts, actionType, project);
        return recv_Internal_GetRecommendSoftsExBySoftIdentifier();

        #else
        var asyncResult = Begin_Internal_GetRecommendSoftsExBySoftIdentifier(null, null, imei, fwVersion, pad, softIndentifier, categoryIds, excludeCategoryIds, count, isLimit, isAuthorize, isOldVer, startIndex, uin, cpu, explanationType, isFillRecommendSofts, actionType, project);
        return End_Internal_GetRecommendSoftsExBySoftIdentifier(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetRecommendSoftsExBySoftIdentifier(AsyncCallback callback, object state, string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project)
      #else
      public void send_Internal_GetRecommendSoftsExBySoftIdentifier(string imei, int fwVersion, int pad, string softIndentifier, List<int> categoryIds, List<int> excludeCategoryIds, int count, bool isLimit, int isAuthorize, bool isOldVer, int startIndex, long uin, int cpu, int explanationType, bool isFillRecommendSofts, int actionType, int project)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetRecommendSoftsExBySoftIdentifier", TMessageType.Call, seqid_));
        Internal_GetRecommendSoftsExBySoftIdentifier_args args = new Internal_GetRecommendSoftsExBySoftIdentifier_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.softIndentifier = softIndentifier;
        args.categoryIds = categoryIds;
        args.excludeCategoryIds = excludeCategoryIds;
        args.count = count;
        args.isLimit = isLimit;
        args.isAuthorize = isAuthorize;
        args.isOldVer = isOldVer;
        args.startIndex = startIndex;
        args.uin = uin;
        args.cpu = cpu;
        args.explanationType = explanationType;
        args.isFillRecommendSofts = isFillRecommendSofts;
        args.actionType = actionType;
        args.project = project;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetRecommendSoftsExBySoftIdentifier()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetRecommendSoftsExBySoftIdentifier_result result = new Internal_GetRecommendSoftsExBySoftIdentifier_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetRecommendSoftsExBySoftIdentifier failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetInstalledSoftByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache, int installedStatus)
      {
        return send_Internal_GetInstalledSoftByImei(callback, state, imei, fwVersion, pad, pageSize, pageIndex, enableCache, installedStatus);
      }

      public byte[] End_Internal_GetInstalledSoftByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetInstalledSoftByImei();
      }

      #endif

      /// <summary>
      /// 根据IMEI，分页返回安装过的软件
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="pageSize"></param>
      /// <param name="pageIndex"></param>
      /// <param name="enableCache"></param>
      /// <param name="installedStatus"></param>
      public byte[] Internal_GetInstalledSoftByImei(string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache, int installedStatus)
      {
        #if !SILVERLIGHT
        send_Internal_GetInstalledSoftByImei(imei, fwVersion, pad, pageSize, pageIndex, enableCache, installedStatus);
        return recv_Internal_GetInstalledSoftByImei();

        #else
        var asyncResult = Begin_Internal_GetInstalledSoftByImei(null, null, imei, fwVersion, pad, pageSize, pageIndex, enableCache, installedStatus);
        return End_Internal_GetInstalledSoftByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetInstalledSoftByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache, int installedStatus)
      #else
      public void send_Internal_GetInstalledSoftByImei(string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache, int installedStatus)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftByImei", TMessageType.Call, seqid_));
        Internal_GetInstalledSoftByImei_args args = new Internal_GetInstalledSoftByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.pageSize = pageSize;
        args.pageIndex = pageIndex;
        args.enableCache = enableCache;
        args.installedStatus = installedStatus;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetInstalledSoftByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetInstalledSoftByImei_result result = new Internal_GetInstalledSoftByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetInstalledSoftByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetInstalledSoftCountByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      {
        return send_Internal_GetInstalledSoftCountByImei(callback, state, imei, fwVersion, pad);
      }

      public int End_Internal_GetInstalledSoftCountByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetInstalledSoftCountByImei();
      }

      #endif

      /// <summary>
      /// 根据IMEI，分页返回安装过的数量（含已卸载，仅我们库中存在的那些软件）
      /// @return i32 - 返回安装过的数量
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      public int Internal_GetInstalledSoftCountByImei(string imei, int fwVersion, int pad)
      {
        #if !SILVERLIGHT
        send_Internal_GetInstalledSoftCountByImei(imei, fwVersion, pad);
        return recv_Internal_GetInstalledSoftCountByImei();

        #else
        var asyncResult = Begin_Internal_GetInstalledSoftCountByImei(null, null, imei, fwVersion, pad);
        return End_Internal_GetInstalledSoftCountByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetInstalledSoftCountByImei(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      #else
      public void send_Internal_GetInstalledSoftCountByImei(string imei, int fwVersion, int pad)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftCountByImei", TMessageType.Call, seqid_));
        Internal_GetInstalledSoftCountByImei_args args = new Internal_GetInstalledSoftCountByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_Internal_GetInstalledSoftCountByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetInstalledSoftCountByImei_result result = new Internal_GetInstalledSoftCountByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetInstalledSoftCountByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetInstalledSoftByUin(AsyncCallback callback, object state, long uin, string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache)
      {
        return send_Internal_GetInstalledSoftByUin(callback, state, uin, imei, fwVersion, pad, pageSize, pageIndex, enableCache);
      }

      public byte[] End_Internal_GetInstalledSoftByUin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetInstalledSoftByUin();
      }

      #endif

      /// <summary>
      /// 根据Uin，返回安装过的软件总数（含已卸载，仅我们库中存在的那些软件）
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="pageSize"></param>
      /// <param name="pageIndex"></param>
      /// <param name="enableCache"></param>
      public byte[] Internal_GetInstalledSoftByUin(long uin, string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache)
      {
        #if !SILVERLIGHT
        send_Internal_GetInstalledSoftByUin(uin, imei, fwVersion, pad, pageSize, pageIndex, enableCache);
        return recv_Internal_GetInstalledSoftByUin();

        #else
        var asyncResult = Begin_Internal_GetInstalledSoftByUin(null, null, uin, imei, fwVersion, pad, pageSize, pageIndex, enableCache);
        return End_Internal_GetInstalledSoftByUin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetInstalledSoftByUin(AsyncCallback callback, object state, long uin, string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache)
      #else
      public void send_Internal_GetInstalledSoftByUin(long uin, string imei, int fwVersion, int pad, int pageSize, int pageIndex, bool enableCache)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftByUin", TMessageType.Call, seqid_));
        Internal_GetInstalledSoftByUin_args args = new Internal_GetInstalledSoftByUin_args();
        args.uin = uin;
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.pageSize = pageSize;
        args.pageIndex = pageIndex;
        args.enableCache = enableCache;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetInstalledSoftByUin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetInstalledSoftByUin_result result = new Internal_GetInstalledSoftByUin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetInstalledSoftByUin failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetImeisByUin(AsyncCallback callback, object state, long uin, int fwVersion, int pad, bool filterByPlatform)
      {
        return send_Internal_GetImeisByUin(callback, state, uin, fwVersion, pad, filterByPlatform);
      }

      public List<string> End_Internal_GetImeisByUin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetImeisByUin();
      }

      #endif

      /// <summary>
      /// 根据uin, 获取用户所有IMEI
      /// @param bool filterByPlatform - 是否只返回指定平台下有数据的IMEI
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="filterByPlatform"></param>
      public List<string> Internal_GetImeisByUin(long uin, int fwVersion, int pad, bool filterByPlatform)
      {
        #if !SILVERLIGHT
        send_Internal_GetImeisByUin(uin, fwVersion, pad, filterByPlatform);
        return recv_Internal_GetImeisByUin();

        #else
        var asyncResult = Begin_Internal_GetImeisByUin(null, null, uin, fwVersion, pad, filterByPlatform);
        return End_Internal_GetImeisByUin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetImeisByUin(AsyncCallback callback, object state, long uin, int fwVersion, int pad, bool filterByPlatform)
      #else
      public void send_Internal_GetImeisByUin(long uin, int fwVersion, int pad, bool filterByPlatform)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetImeisByUin", TMessageType.Call, seqid_));
        Internal_GetImeisByUin_args args = new Internal_GetImeisByUin_args();
        args.uin = uin;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.filterByPlatform = filterByPlatform;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_Internal_GetImeisByUin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetImeisByUin_result result = new Internal_GetImeisByUin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_UpdateInstalledSoftHideStatusByImei(AsyncCallback callback, object state, List<string> imeis, List<string> identifiers, int fwVersion, int pad, int hideStatus)
      {
        return send_Internal_UpdateInstalledSoftHideStatusByImei(callback, state, imeis, identifiers, fwVersion, pad, hideStatus);
      }

      public void End_Internal_UpdateInstalledSoftHideStatusByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Internal_UpdateInstalledSoftHideStatusByImei();
      }

      #endif

      /// <summary>
      /// 根据Sid或者IMEI更新安装软件隐藏状态
      /// </summary>
      /// <param name="imeis"></param>
      /// <param name="identifiers"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="hideStatus"></param>
      public void Internal_UpdateInstalledSoftHideStatusByImei(List<string> imeis, List<string> identifiers, int fwVersion, int pad, int hideStatus)
      {
        #if !SILVERLIGHT
        send_Internal_UpdateInstalledSoftHideStatusByImei(imeis, identifiers, fwVersion, pad, hideStatus);
        recv_Internal_UpdateInstalledSoftHideStatusByImei();

        #else
        var asyncResult = Begin_Internal_UpdateInstalledSoftHideStatusByImei(null, null, imeis, identifiers, fwVersion, pad, hideStatus);
        End_Internal_UpdateInstalledSoftHideStatusByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_UpdateInstalledSoftHideStatusByImei(AsyncCallback callback, object state, List<string> imeis, List<string> identifiers, int fwVersion, int pad, int hideStatus)
      #else
      public void send_Internal_UpdateInstalledSoftHideStatusByImei(List<string> imeis, List<string> identifiers, int fwVersion, int pad, int hideStatus)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_UpdateInstalledSoftHideStatusByImei", TMessageType.Call, seqid_));
        Internal_UpdateInstalledSoftHideStatusByImei_args args = new Internal_UpdateInstalledSoftHideStatusByImei_args();
        args.imeis = imeis;
        args.identifiers = identifiers;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.hideStatus = hideStatus;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Internal_UpdateInstalledSoftHideStatusByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_UpdateInstalledSoftHideStatusByImei_result result = new Internal_UpdateInstalledSoftHideStatusByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetInstalledSoftCountByUin(AsyncCallback callback, object state, long uin, string imei, int fwVersion, int pad, bool enableCache)
      {
        return send_Internal_GetInstalledSoftCountByUin(callback, state, uin, imei, fwVersion, pad, enableCache);
      }

      public int End_Internal_GetInstalledSoftCountByUin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetInstalledSoftCountByUin();
      }

      #endif

      /// <summary>
      /// 根据uin和当前IMEI获取已安装软件个数
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="enableCache"></param>
      public int Internal_GetInstalledSoftCountByUin(long uin, string imei, int fwVersion, int pad, bool enableCache)
      {
        #if !SILVERLIGHT
        send_Internal_GetInstalledSoftCountByUin(uin, imei, fwVersion, pad, enableCache);
        return recv_Internal_GetInstalledSoftCountByUin();

        #else
        var asyncResult = Begin_Internal_GetInstalledSoftCountByUin(null, null, uin, imei, fwVersion, pad, enableCache);
        return End_Internal_GetInstalledSoftCountByUin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetInstalledSoftCountByUin(AsyncCallback callback, object state, long uin, string imei, int fwVersion, int pad, bool enableCache)
      #else
      public void send_Internal_GetInstalledSoftCountByUin(long uin, string imei, int fwVersion, int pad, bool enableCache)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftCountByUin", TMessageType.Call, seqid_));
        Internal_GetInstalledSoftCountByUin_args args = new Internal_GetInstalledSoftCountByUin_args();
        args.uin = uin;
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.enableCache = enableCache;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_Internal_GetInstalledSoftCountByUin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetInstalledSoftCountByUin_result result = new Internal_GetInstalledSoftCountByUin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetInstalledSoftCountByUin failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_ClearUserSoftware(AsyncCallback callback, object state, string imei, int platform)
      {
        return send_Internal_ClearUserSoftware(callback, state, imei, platform);
      }

      public void End_Internal_ClearUserSoftware(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Internal_ClearUserSoftware();
      }

      #endif

      /// <summary>
      /// 清空Reids上的用户已安装软件
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="platform"></param>
      public void Internal_ClearUserSoftware(string imei, int platform)
      {
        #if !SILVERLIGHT
        send_Internal_ClearUserSoftware(imei, platform);
        recv_Internal_ClearUserSoftware();

        #else
        var asyncResult = Begin_Internal_ClearUserSoftware(null, null, imei, platform);
        End_Internal_ClearUserSoftware(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_ClearUserSoftware(AsyncCallback callback, object state, string imei, int platform)
      #else
      public void send_Internal_ClearUserSoftware(string imei, int platform)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_ClearUserSoftware", TMessageType.Call, seqid_));
        Internal_ClearUserSoftware_args args = new Internal_ClearUserSoftware_args();
        args.imei = imei;
        args.platform = platform;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Internal_ClearUserSoftware()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_ClearUserSoftware_result result = new Internal_ClearUserSoftware_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetLikeOrNotSofts(AsyncCallback callback, object state, long uin, string imei, int fwVersion, int pad)
      {
        return send_Internal_GetLikeOrNotSofts(callback, state, uin, imei, fwVersion, pad);
      }

      public byte[] End_Internal_GetLikeOrNotSofts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetLikeOrNotSofts();
      }

      #endif

      /// <summary>
      /// 获取喜欢不喜欢软件列表(测试)
      /// </summary>
      /// <param name="uin"></param>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      public byte[] Internal_GetLikeOrNotSofts(long uin, string imei, int fwVersion, int pad)
      {
        #if !SILVERLIGHT
        send_Internal_GetLikeOrNotSofts(uin, imei, fwVersion, pad);
        return recv_Internal_GetLikeOrNotSofts();

        #else
        var asyncResult = Begin_Internal_GetLikeOrNotSofts(null, null, uin, imei, fwVersion, pad);
        return End_Internal_GetLikeOrNotSofts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetLikeOrNotSofts(AsyncCallback callback, object state, long uin, string imei, int fwVersion, int pad)
      #else
      public void send_Internal_GetLikeOrNotSofts(long uin, string imei, int fwVersion, int pad)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetLikeOrNotSofts", TMessageType.Call, seqid_));
        Internal_GetLikeOrNotSofts_args args = new Internal_GetLikeOrNotSofts_args();
        args.uin = uin;
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetLikeOrNotSofts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetLikeOrNotSofts_result result = new Internal_GetLikeOrNotSofts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetLikeOrNotSofts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetInstalledSoftHideStatusByImeis(AsyncCallback callback, object state, List<string> imeis, int fwVersion, int pad, int pagesize, int pageindex, int installedStatus)
      {
        return send_Internal_GetInstalledSoftHideStatusByImeis(callback, state, imeis, fwVersion, pad, pagesize, pageindex, installedStatus);
      }

      public byte[] End_Internal_GetInstalledSoftHideStatusByImeis(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetInstalledSoftHideStatusByImeis();
      }

      #endif

      /// <summary>
      /// 根据IMEI获取隐藏的已安装软件
      /// </summary>
      /// <param name="imeis"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      /// <param name="pagesize"></param>
      /// <param name="pageindex"></param>
      /// <param name="installedStatus"></param>
      public byte[] Internal_GetInstalledSoftHideStatusByImeis(List<string> imeis, int fwVersion, int pad, int pagesize, int pageindex, int installedStatus)
      {
        #if !SILVERLIGHT
        send_Internal_GetInstalledSoftHideStatusByImeis(imeis, fwVersion, pad, pagesize, pageindex, installedStatus);
        return recv_Internal_GetInstalledSoftHideStatusByImeis();

        #else
        var asyncResult = Begin_Internal_GetInstalledSoftHideStatusByImeis(null, null, imeis, fwVersion, pad, pagesize, pageindex, installedStatus);
        return End_Internal_GetInstalledSoftHideStatusByImeis(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetInstalledSoftHideStatusByImeis(AsyncCallback callback, object state, List<string> imeis, int fwVersion, int pad, int pagesize, int pageindex, int installedStatus)
      #else
      public void send_Internal_GetInstalledSoftHideStatusByImeis(List<string> imeis, int fwVersion, int pad, int pagesize, int pageindex, int installedStatus)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftHideStatusByImeis", TMessageType.Call, seqid_));
        Internal_GetInstalledSoftHideStatusByImeis_args args = new Internal_GetInstalledSoftHideStatusByImeis_args();
        args.imeis = imeis;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.pagesize = pagesize;
        args.pageindex = pageindex;
        args.installedStatus = installedStatus;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetInstalledSoftHideStatusByImeis()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetInstalledSoftHideStatusByImeis_result result = new Internal_GetInstalledSoftHideStatusByImeis_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetInstalledSoftHideStatusByImeis failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetFilterableSoft(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      {
        return send_Internal_GetFilterableSoft(callback, state, imei, fwVersion, pad);
      }

      public byte[] End_Internal_GetFilterableSoft(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetFilterableSoft();
      }

      #endif

      /// <summary>
      /// 获取可过滤软件列表(测试)
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      public byte[] Internal_GetFilterableSoft(string imei, int fwVersion, int pad)
      {
        #if !SILVERLIGHT
        send_Internal_GetFilterableSoft(imei, fwVersion, pad);
        return recv_Internal_GetFilterableSoft();

        #else
        var asyncResult = Begin_Internal_GetFilterableSoft(null, null, imei, fwVersion, pad);
        return End_Internal_GetFilterableSoft(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetFilterableSoft(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      #else
      public void send_Internal_GetFilterableSoft(string imei, int fwVersion, int pad)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetFilterableSoft", TMessageType.Call, seqid_));
        Internal_GetFilterableSoft_args args = new Internal_GetFilterableSoft_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetFilterableSoft()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetFilterableSoft_result result = new Internal_GetFilterableSoft_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetFilterableSoft failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetInstalledAndUnInstalledCount(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      {
        return send_Internal_GetInstalledAndUnInstalledCount(callback, state, imei, fwVersion, pad);
      }

      public Dictionary<int, int> End_Internal_GetInstalledAndUnInstalledCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetInstalledAndUnInstalledCount();
      }

      #endif

      /// <summary>
      /// 获取(key:0)已安装软件 和 (key:1)已卸载软件 数据量
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      public Dictionary<int, int> Internal_GetInstalledAndUnInstalledCount(string imei, int fwVersion, int pad)
      {
        #if !SILVERLIGHT
        send_Internal_GetInstalledAndUnInstalledCount(imei, fwVersion, pad);
        return recv_Internal_GetInstalledAndUnInstalledCount();

        #else
        var asyncResult = Begin_Internal_GetInstalledAndUnInstalledCount(null, null, imei, fwVersion, pad);
        return End_Internal_GetInstalledAndUnInstalledCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetInstalledAndUnInstalledCount(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      #else
      public void send_Internal_GetInstalledAndUnInstalledCount(string imei, int fwVersion, int pad)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetInstalledAndUnInstalledCount", TMessageType.Call, seqid_));
        Internal_GetInstalledAndUnInstalledCount_args args = new Internal_GetInstalledAndUnInstalledCount_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<int, int> recv_Internal_GetInstalledAndUnInstalledCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetInstalledAndUnInstalledCount_result result = new Internal_GetInstalledAndUnInstalledCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetInstalledSofts(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      {
        return send_Internal_GetInstalledSofts(callback, state, imei, fwVersion, pad);
      }

      public byte[] End_Internal_GetInstalledSofts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetInstalledSofts();
      }

      #endif

      /// <summary>
      /// 获取用户已安装软件
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      public byte[] Internal_GetInstalledSofts(string imei, int fwVersion, int pad)
      {
        #if !SILVERLIGHT
        send_Internal_GetInstalledSofts(imei, fwVersion, pad);
        return recv_Internal_GetInstalledSofts();

        #else
        var asyncResult = Begin_Internal_GetInstalledSofts(null, null, imei, fwVersion, pad);
        return End_Internal_GetInstalledSofts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetInstalledSofts(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      #else
      public void send_Internal_GetInstalledSofts(string imei, int fwVersion, int pad)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetInstalledSofts", TMessageType.Call, seqid_));
        Internal_GetInstalledSofts_args args = new Internal_GetInstalledSofts_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetInstalledSofts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetInstalledSofts_result result = new Internal_GetInstalledSofts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetInstalledSofts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetEarliestTimeGatherTime(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      {
        return send_Internal_GetEarliestTimeGatherTime(callback, state, imei, fwVersion, pad);
      }

      public byte[] End_Internal_GetEarliestTimeGatherTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetEarliestTimeGatherTime();
      }

      #endif

      /// <summary>
      /// 根据IMEI获取最早收集时间
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="pad"></param>
      public byte[] Internal_GetEarliestTimeGatherTime(string imei, int fwVersion, int pad)
      {
        #if !SILVERLIGHT
        send_Internal_GetEarliestTimeGatherTime(imei, fwVersion, pad);
        return recv_Internal_GetEarliestTimeGatherTime();

        #else
        var asyncResult = Begin_Internal_GetEarliestTimeGatherTime(null, null, imei, fwVersion, pad);
        return End_Internal_GetEarliestTimeGatherTime(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetEarliestTimeGatherTime(AsyncCallback callback, object state, string imei, int fwVersion, int pad)
      #else
      public void send_Internal_GetEarliestTimeGatherTime(string imei, int fwVersion, int pad)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetEarliestTimeGatherTime", TMessageType.Call, seqid_));
        Internal_GetEarliestTimeGatherTime_args args = new Internal_GetEarliestTimeGatherTime_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.pad = pad;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetEarliestTimeGatherTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetEarliestTimeGatherTime_result result = new Internal_GetEarliestTimeGatherTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetEarliestTimeGatherTime failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetRecommendThemesByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks)
      {
        return send_Internal_GetRecommendThemesByImei(callback, state, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, channel, minDateTicks);
      }

      public byte[] End_Internal_GetRecommendThemesByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetRecommendThemesByImei();
      }

      #endif

      /// <summary>
      ///  依据用户推荐相关主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      public byte[] Internal_GetRecommendThemesByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks)
      {
        #if !SILVERLIGHT
        send_Internal_GetRecommendThemesByImei(imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, channel, minDateTicks);
        return recv_Internal_GetRecommendThemesByImei();

        #else
        var asyncResult = Begin_Internal_GetRecommendThemesByImei(null, null, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, channel, minDateTicks);
        return End_Internal_GetRecommendThemesByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetRecommendThemesByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks)
      #else
      public void send_Internal_GetRecommendThemesByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetRecommendThemesByImei", TMessageType.Call, seqid_));
        Internal_GetRecommendThemesByImei_args args = new Internal_GetRecommendThemesByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.randomSelect = randomSelect;
        args.isAdd = isAdd;
        args.channel = channel;
        args.minDateTicks = minDateTicks;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetRecommendThemesByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetRecommendThemesByImei_result result = new Internal_GetRecommendThemesByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetRecommendThemesByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetRecommendThemeV6sByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks)
      {
        return send_Internal_GetRecommendThemeV6sByImei(callback, state, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, channel, minDateTicks);
      }

      public byte[] End_Internal_GetRecommendThemeV6sByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetRecommendThemeV6sByImei();
      }

      #endif

      /// <summary>
      ///  依据用户推荐相关主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool randomSelect - 随机抽取
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="randomSelect"></param>
      /// <param name="isAdd"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      public byte[] Internal_GetRecommendThemeV6sByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks)
      {
        #if !SILVERLIGHT
        send_Internal_GetRecommendThemeV6sByImei(imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, channel, minDateTicks);
        return recv_Internal_GetRecommendThemeV6sByImei();

        #else
        var asyncResult = Begin_Internal_GetRecommendThemeV6sByImei(null, null, imei, fwVersion, slicenumber, mlicenumber, timeOption, randomSelect, isAdd, channel, minDateTicks);
        return End_Internal_GetRecommendThemeV6sByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetRecommendThemeV6sByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks)
      #else
      public void send_Internal_GetRecommendThemeV6sByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int timeOption, bool randomSelect, bool isAdd, int channel, long minDateTicks)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetRecommendThemeV6sByImei", TMessageType.Call, seqid_));
        Internal_GetRecommendThemeV6sByImei_args args = new Internal_GetRecommendThemeV6sByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.randomSelect = randomSelect;
        args.isAdd = isAdd;
        args.channel = channel;
        args.minDateTicks = minDateTicks;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetRecommendThemeV6sByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetRecommendThemeV6sByImei_result result = new Internal_GetRecommendThemeV6sByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetRecommendThemeV6sByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetGoodRecommendThemesByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks)
      {
        return send_Internal_GetGoodRecommendThemesByImei(callback, state, imei, fwVersion, slicenumber, mlicenumber, overTimeOption, channel, minDateTicks);
      }

      public byte[] End_Internal_GetGoodRecommendThemesByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetGoodRecommendThemesByImei();
      }

      #endif

      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      public byte[] Internal_GetGoodRecommendThemesByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks)
      {
        #if !SILVERLIGHT
        send_Internal_GetGoodRecommendThemesByImei(imei, fwVersion, slicenumber, mlicenumber, overTimeOption, channel, minDateTicks);
        return recv_Internal_GetGoodRecommendThemesByImei();

        #else
        var asyncResult = Begin_Internal_GetGoodRecommendThemesByImei(null, null, imei, fwVersion, slicenumber, mlicenumber, overTimeOption, channel, minDateTicks);
        return End_Internal_GetGoodRecommendThemesByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetGoodRecommendThemesByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks)
      #else
      public void send_Internal_GetGoodRecommendThemesByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetGoodRecommendThemesByImei", TMessageType.Call, seqid_));
        Internal_GetGoodRecommendThemesByImei_args args = new Internal_GetGoodRecommendThemesByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.overTimeOption = overTimeOption;
        args.channel = channel;
        args.minDateTicks = minDateTicks;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetGoodRecommendThemesByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetGoodRecommendThemesByImei_result result = new Internal_GetGoodRecommendThemesByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetGoodRecommendThemesByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetGoodRecommendThemeV6sByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks)
      {
        return send_Internal_GetGoodRecommendThemeV6sByImei(callback, state, imei, fwVersion, slicenumber, mlicenumber, overTimeOption, channel, minDateTicks);
      }

      public byte[] End_Internal_GetGoodRecommendThemeV6sByImei(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetGoodRecommendThemeV6sByImei();
      }

      #endif

      /// <summary>
      /// 依据用户推荐相关精品主题
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 overTimeOption - 上架超过某个时间范围
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="imei"></param>
      /// <param name="fwVersion"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="overTimeOption"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      public byte[] Internal_GetGoodRecommendThemeV6sByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks)
      {
        #if !SILVERLIGHT
        send_Internal_GetGoodRecommendThemeV6sByImei(imei, fwVersion, slicenumber, mlicenumber, overTimeOption, channel, minDateTicks);
        return recv_Internal_GetGoodRecommendThemeV6sByImei();

        #else
        var asyncResult = Begin_Internal_GetGoodRecommendThemeV6sByImei(null, null, imei, fwVersion, slicenumber, mlicenumber, overTimeOption, channel, minDateTicks);
        return End_Internal_GetGoodRecommendThemeV6sByImei(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetGoodRecommendThemeV6sByImei(AsyncCallback callback, object state, string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks)
      #else
      public void send_Internal_GetGoodRecommendThemeV6sByImei(string imei, int fwVersion, int slicenumber, int mlicenumber, int overTimeOption, int channel, long minDateTicks)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetGoodRecommendThemeV6sByImei", TMessageType.Call, seqid_));
        Internal_GetGoodRecommendThemeV6sByImei_args args = new Internal_GetGoodRecommendThemeV6sByImei_args();
        args.imei = imei;
        args.fwVersion = fwVersion;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.overTimeOption = overTimeOption;
        args.channel = channel;
        args.minDateTicks = minDateTicks;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetGoodRecommendThemeV6sByImei()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetGoodRecommendThemeV6sByImei_result result = new Internal_GetGoodRecommendThemeV6sByImei_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetGoodRecommendThemeV6sByImei failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetRecommendThemesByThemeId(AsyncCallback callback, object state, int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks)
      {
        return send_Internal_GetRecommendThemesByThemeId(callback, state, fwVersion, themeId, slicenumber, mlicenumber, timeOption, isAdd, arithmetic, channel, minDateTicks);
      }

      public byte[] End_Internal_GetRecommendThemesByThemeId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetRecommendThemesByThemeId();
      }

      #endif

      /// <summary>
      /// 依据主题ID推荐相关主题(默认: 优先关联, 再相似)
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @param i32 arithmetic - 0 - 优先关联, 再相似; 1 - 相似算法
      /// @param i32  channel - 渠道
      /// @return binary - 返回SimpleTheme列表的Protobuf二进制
      /// </summary>
      /// <param name="fwVersion"></param>
      /// <param name="themeId"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="arithmetic"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      public byte[] Internal_GetRecommendThemesByThemeId(int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks)
      {
        #if !SILVERLIGHT
        send_Internal_GetRecommendThemesByThemeId(fwVersion, themeId, slicenumber, mlicenumber, timeOption, isAdd, arithmetic, channel, minDateTicks);
        return recv_Internal_GetRecommendThemesByThemeId();

        #else
        var asyncResult = Begin_Internal_GetRecommendThemesByThemeId(null, null, fwVersion, themeId, slicenumber, mlicenumber, timeOption, isAdd, arithmetic, channel, minDateTicks);
        return End_Internal_GetRecommendThemesByThemeId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetRecommendThemesByThemeId(AsyncCallback callback, object state, int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks)
      #else
      public void send_Internal_GetRecommendThemesByThemeId(int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetRecommendThemesByThemeId", TMessageType.Call, seqid_));
        Internal_GetRecommendThemesByThemeId_args args = new Internal_GetRecommendThemesByThemeId_args();
        args.fwVersion = fwVersion;
        args.themeId = themeId;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.arithmetic = arithmetic;
        args.channel = channel;
        args.minDateTicks = minDateTicks;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetRecommendThemesByThemeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetRecommendThemesByThemeId_result result = new Internal_GetRecommendThemesByThemeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetRecommendThemesByThemeId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetRecommendThemeV6sByThemeId(AsyncCallback callback, object state, int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks)
      {
        return send_Internal_GetRecommendThemeV6sByThemeId(callback, state, fwVersion, themeId, slicenumber, mlicenumber, timeOption, isAdd, arithmetic, channel, minDateTicks);
      }

      public byte[] End_Internal_GetRecommendThemeV6sByThemeId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetRecommendThemeV6sByThemeId();
      }

      #endif

      /// <summary>
      /// 依据主题ID推荐相关主题(默认: 优先关联, 再相似)
      /// @param i32 themeId - 主题Id
      /// @param i32 slicenumber - 收费主题总数
      /// @param i32 mlicenumber - 免费主题总数
      /// @param i32 timeOption - 时间范围
      /// @param bool isAdd - 当结果不足时, 是否自动补充
      /// @param i32 arithmetic - 0 - 优先关联, 再相似; 1 - 相似算法
      /// @param i32  channel - 渠道
      /// @return binary - 返回SimpleThemeV6列表的Protobuf二进制
      /// </summary>
      /// <param name="fwVersion"></param>
      /// <param name="themeId"></param>
      /// <param name="slicenumber"></param>
      /// <param name="mlicenumber"></param>
      /// <param name="timeOption"></param>
      /// <param name="isAdd"></param>
      /// <param name="arithmetic"></param>
      /// <param name="channel"></param>
      /// <param name="minDateTicks"></param>
      public byte[] Internal_GetRecommendThemeV6sByThemeId(int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks)
      {
        #if !SILVERLIGHT
        send_Internal_GetRecommendThemeV6sByThemeId(fwVersion, themeId, slicenumber, mlicenumber, timeOption, isAdd, arithmetic, channel, minDateTicks);
        return recv_Internal_GetRecommendThemeV6sByThemeId();

        #else
        var asyncResult = Begin_Internal_GetRecommendThemeV6sByThemeId(null, null, fwVersion, themeId, slicenumber, mlicenumber, timeOption, isAdd, arithmetic, channel, minDateTicks);
        return End_Internal_GetRecommendThemeV6sByThemeId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetRecommendThemeV6sByThemeId(AsyncCallback callback, object state, int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks)
      #else
      public void send_Internal_GetRecommendThemeV6sByThemeId(int fwVersion, long themeId, int slicenumber, int mlicenumber, int timeOption, bool isAdd, int arithmetic, int channel, long minDateTicks)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetRecommendThemeV6sByThemeId", TMessageType.Call, seqid_));
        Internal_GetRecommendThemeV6sByThemeId_args args = new Internal_GetRecommendThemeV6sByThemeId_args();
        args.fwVersion = fwVersion;
        args.themeId = themeId;
        args.slicenumber = slicenumber;
        args.mlicenumber = mlicenumber;
        args.timeOption = timeOption;
        args.isAdd = isAdd;
        args.arithmetic = arithmetic;
        args.channel = channel;
        args.minDateTicks = minDateTicks;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetRecommendThemeV6sByThemeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetRecommendThemeV6sByThemeId_result result = new Internal_GetRecommendThemeV6sByThemeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetRecommendThemeV6sByThemeId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetThemeV6ByThemeId(AsyncCallback callback, object state, int fwVersion, long themeId)
      {
        return send_Internal_GetThemeV6ByThemeId(callback, state, fwVersion, themeId);
      }

      public byte[] End_Internal_GetThemeV6ByThemeId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetThemeV6ByThemeId();
      }

      #endif

      /// <summary>
      /// 根据主题Id获取主题
      /// @param i32 themeId - 主题Id
      /// </summary>
      /// <param name="fwVersion"></param>
      /// <param name="themeId"></param>
      public byte[] Internal_GetThemeV6ByThemeId(int fwVersion, long themeId)
      {
        #if !SILVERLIGHT
        send_Internal_GetThemeV6ByThemeId(fwVersion, themeId);
        return recv_Internal_GetThemeV6ByThemeId();

        #else
        var asyncResult = Begin_Internal_GetThemeV6ByThemeId(null, null, fwVersion, themeId);
        return End_Internal_GetThemeV6ByThemeId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetThemeV6ByThemeId(AsyncCallback callback, object state, int fwVersion, long themeId)
      #else
      public void send_Internal_GetThemeV6ByThemeId(int fwVersion, long themeId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetThemeV6ByThemeId", TMessageType.Call, seqid_));
        Internal_GetThemeV6ByThemeId_args args = new Internal_GetThemeV6ByThemeId_args();
        args.fwVersion = fwVersion;
        args.themeId = themeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Internal_GetThemeV6ByThemeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetThemeV6ByThemeId_result result = new Internal_GetThemeV6ByThemeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetThemeV6ByThemeId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_CalculateThemeRecommendById(AsyncCallback callback, object state, int themeId)
      {
        return send_Internal_CalculateThemeRecommendById(callback, state, themeId);
      }

      public int End_Internal_CalculateThemeRecommendById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_CalculateThemeRecommendById();
      }

      #endif

      /// <summary>
      /// 根据主题Id生成推荐主题
      /// </summary>
      /// <param name="themeId"></param>
      public int Internal_CalculateThemeRecommendById(int themeId)
      {
        #if !SILVERLIGHT
        send_Internal_CalculateThemeRecommendById(themeId);
        return recv_Internal_CalculateThemeRecommendById();

        #else
        var asyncResult = Begin_Internal_CalculateThemeRecommendById(null, null, themeId);
        return End_Internal_CalculateThemeRecommendById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_CalculateThemeRecommendById(AsyncCallback callback, object state, int themeId)
      #else
      public void send_Internal_CalculateThemeRecommendById(int themeId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_CalculateThemeRecommendById", TMessageType.Call, seqid_));
        Internal_CalculateThemeRecommendById_args args = new Internal_CalculateThemeRecommendById_args();
        args.themeId = themeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_Internal_CalculateThemeRecommendById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_CalculateThemeRecommendById_result result = new Internal_CalculateThemeRecommendById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_CalculateThemeRecommendById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_RefreshIdx(AsyncCallback callback, object state, string file, int type)
      {
        return send_Internal_RefreshIdx(callback, state, file, type);
      }

      public int End_Internal_RefreshIdx(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_RefreshIdx();
      }

      #endif

      /// <summary>
      /// 根据参数刷新索引,返回0:成功,1:失败
      /// @param string file - 刷新的文件
      /// @param i32 arithmetic - 0 - 刷新配置; 1 - 刷新软件 2 - 刷新主题
      /// </summary>
      /// <param name="file"></param>
      /// <param name="type"></param>
      public int Internal_RefreshIdx(string file, int type)
      {
        #if !SILVERLIGHT
        send_Internal_RefreshIdx(file, type);
        return recv_Internal_RefreshIdx();

        #else
        var asyncResult = Begin_Internal_RefreshIdx(null, null, file, type);
        return End_Internal_RefreshIdx(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_RefreshIdx(AsyncCallback callback, object state, string file, int type)
      #else
      public void send_Internal_RefreshIdx(string file, int type)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_RefreshIdx", TMessageType.Call, seqid_));
        Internal_RefreshIdx_args args = new Internal_RefreshIdx_args();
        args.file = file;
        args.type = type;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_Internal_RefreshIdx()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_RefreshIdx_result result = new Internal_RefreshIdx_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_RefreshIdx failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Internal_GetConfig(AsyncCallback callback, object state)
      {
        return send_Internal_GetConfig(callback, state);
      }

      public string End_Internal_GetConfig(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Internal_GetConfig();
      }

      #endif

      /// <summary>
      /// 获取配置参数
      /// </summary>
      public string Internal_GetConfig()
      {
        #if !SILVERLIGHT
        send_Internal_GetConfig();
        return recv_Internal_GetConfig();

        #else
        var asyncResult = Begin_Internal_GetConfig(null, null);
        return End_Internal_GetConfig(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Internal_GetConfig(AsyncCallback callback, object state)
      #else
      public void send_Internal_GetConfig()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Internal_GetConfig", TMessageType.Call, seqid_));
        Internal_GetConfig_args args = new Internal_GetConfig_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Internal_GetConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Internal_GetConfig_result result = new Internal_GetConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Internal_GetConfig failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetSoftRecommendByImei"] = GetSoftRecommendByImei_Process;
        processMap_["GetSoftRecommendWithFilterByImei"] = GetSoftRecommendWithFilterByImei_Process;
        processMap_["GetRecommendSoftsBySoftId"] = GetRecommendSoftsBySoftId_Process;
        processMap_["GetRecommendSoftsBySoftIdentifier"] = GetRecommendSoftsBySoftIdentifier_Process;
        processMap_["GetThemeRecommendUserUse"] = GetThemeRecommendUserUse_Process;
        processMap_["GetThemeV6RecommendUserUse"] = GetThemeV6RecommendUserUse_Process;
        processMap_["GetThemeRecommendUserUseV2"] = GetThemeRecommendUserUseV2_Process;
        processMap_["GetThemeV6RecommendUserUseV2"] = GetThemeV6RecommendUserUseV2_Process;
        processMap_["GetGoodThemeRecommendUser"] = GetGoodThemeRecommendUser_Process;
        processMap_["GetGoodThemeV6RecommendUser"] = GetGoodThemeV6RecommendUser_Process;
        processMap_["GetGoodThemeRecommendUserV2"] = GetGoodThemeRecommendUserV2_Process;
        processMap_["GetGoodThemeV6RecommendUserV2"] = GetGoodThemeV6RecommendUserV2_Process;
        processMap_["GetThemeRecommendThemeId"] = GetThemeRecommendThemeId_Process;
        processMap_["GetThemeV6RecommendThemeId"] = GetThemeV6RecommendThemeId_Process;
        processMap_["GetThemeRecommendThemeIdV2"] = GetThemeRecommendThemeIdV2_Process;
        processMap_["GetThemeV6RecommendThemeIdV2"] = GetThemeV6RecommendThemeIdV2_Process;
        processMap_["GetThemeSimilarThemeId"] = GetThemeSimilarThemeId_Process;
        processMap_["GetThemeV6SimilarThemeId"] = GetThemeV6SimilarThemeId_Process;
        processMap_["GetThemeSimilarThemeIdV2"] = GetThemeSimilarThemeIdV2_Process;
        processMap_["GetThemeV6SimilarThemeIdV2"] = GetThemeV6SimilarThemeIdV2_Process;
        processMap_["CalculateThemeRecommendById"] = CalculateThemeRecommendById_Process;
        processMap_["GetInstalledSoftIdentifiersByImei"] = GetInstalledSoftIdentifiersByImei_Process;
        processMap_["GetInstalledSoftIdsByImei"] = GetInstalledSoftIdsByImei_Process;
        processMap_["GetInstalledSoftIdentifiersByUin"] = GetInstalledSoftIdentifiersByUin_Process;
        processMap_["GetInstalledSoftIdsByUin"] = GetInstalledSoftIdsByUin_Process;
        processMap_["Internal_GetSoftRecommendByImei"] = Internal_GetSoftRecommendByImei_Process;
        processMap_["Internal_GetPushRecommendByImei"] = Internal_GetPushRecommendByImei_Process;
        processMap_["Internal_GetDirectPushRecommendByImei"] = Internal_GetDirectPushRecommendByImei_Process;
        processMap_["Internal_GetRecommendSoftsBySoftId"] = Internal_GetRecommendSoftsBySoftId_Process;
        processMap_["Internal_GetRecommendSoftsExBySoftId"] = Internal_GetRecommendSoftsExBySoftId_Process;
        processMap_["Internal_GetRecommendSoftsBySoftIdentifier"] = Internal_GetRecommendSoftsBySoftIdentifier_Process;
        processMap_["Internal_GetRecommendSoftsExBySoftIdentifier"] = Internal_GetRecommendSoftsExBySoftIdentifier_Process;
        processMap_["Internal_GetInstalledSoftByImei"] = Internal_GetInstalledSoftByImei_Process;
        processMap_["Internal_GetInstalledSoftCountByImei"] = Internal_GetInstalledSoftCountByImei_Process;
        processMap_["Internal_GetInstalledSoftByUin"] = Internal_GetInstalledSoftByUin_Process;
        processMap_["Internal_GetImeisByUin"] = Internal_GetImeisByUin_Process;
        processMap_["Internal_UpdateInstalledSoftHideStatusByImei"] = Internal_UpdateInstalledSoftHideStatusByImei_Process;
        processMap_["Internal_GetInstalledSoftCountByUin"] = Internal_GetInstalledSoftCountByUin_Process;
        processMap_["Internal_ClearUserSoftware"] = Internal_ClearUserSoftware_Process;
        processMap_["Internal_GetLikeOrNotSofts"] = Internal_GetLikeOrNotSofts_Process;
        processMap_["Internal_GetInstalledSoftHideStatusByImeis"] = Internal_GetInstalledSoftHideStatusByImeis_Process;
        processMap_["Internal_GetFilterableSoft"] = Internal_GetFilterableSoft_Process;
        processMap_["Internal_GetInstalledAndUnInstalledCount"] = Internal_GetInstalledAndUnInstalledCount_Process;
        processMap_["Internal_GetInstalledSofts"] = Internal_GetInstalledSofts_Process;
        processMap_["Internal_GetEarliestTimeGatherTime"] = Internal_GetEarliestTimeGatherTime_Process;
        processMap_["Internal_GetRecommendThemesByImei"] = Internal_GetRecommendThemesByImei_Process;
        processMap_["Internal_GetRecommendThemeV6sByImei"] = Internal_GetRecommendThemeV6sByImei_Process;
        processMap_["Internal_GetGoodRecommendThemesByImei"] = Internal_GetGoodRecommendThemesByImei_Process;
        processMap_["Internal_GetGoodRecommendThemeV6sByImei"] = Internal_GetGoodRecommendThemeV6sByImei_Process;
        processMap_["Internal_GetRecommendThemesByThemeId"] = Internal_GetRecommendThemesByThemeId_Process;
        processMap_["Internal_GetRecommendThemeV6sByThemeId"] = Internal_GetRecommendThemeV6sByThemeId_Process;
        processMap_["Internal_GetThemeV6ByThemeId"] = Internal_GetThemeV6ByThemeId_Process;
        processMap_["Internal_CalculateThemeRecommendById"] = Internal_CalculateThemeRecommendById_Process;
        processMap_["Internal_RefreshIdx"] = Internal_RefreshIdx_Process;
        processMap_["Internal_GetConfig"] = Internal_GetConfig_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetSoftRecommendByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSoftRecommendByImei_args args = new GetSoftRecommendByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSoftRecommendByImei_result result = new GetSoftRecommendByImei_result();
        result.success = iface_.GetSoftRecommendByImei(args.imei, args.fwVersion, args.pad, args.categoryIds, args.excludeCategoryIds, args.size, args.project, args.isLimit, args.guessAgain);
        oprot.WriteMessageBegin(new TMessage("GetSoftRecommendByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSoftRecommendWithFilterByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSoftRecommendWithFilterByImei_args args = new GetSoftRecommendWithFilterByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSoftRecommendWithFilterByImei_result result = new GetSoftRecommendWithFilterByImei_result();
        result.success = iface_.GetSoftRecommendWithFilterByImei(args.imei, args.fwVersion, args.pad, args.categoryIds, args.excludeCategoryIds, args.size, args.project, args.isLimit);
        oprot.WriteMessageBegin(new TMessage("GetSoftRecommendWithFilterByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRecommendSoftsBySoftId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRecommendSoftsBySoftId_args args = new GetRecommendSoftsBySoftId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRecommendSoftsBySoftId_result result = new GetRecommendSoftsBySoftId_result();
        result.success = iface_.GetRecommendSoftsBySoftId(args.imei, args.fwVersion, args.pad, args.softId, args.categoryIds, args.excludeCategoryIds, args.size, args.project, args.isLimit);
        oprot.WriteMessageBegin(new TMessage("GetRecommendSoftsBySoftId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRecommendSoftsBySoftIdentifier_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRecommendSoftsBySoftIdentifier_args args = new GetRecommendSoftsBySoftIdentifier_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRecommendSoftsBySoftIdentifier_result result = new GetRecommendSoftsBySoftIdentifier_result();
        result.success = iface_.GetRecommendSoftsBySoftIdentifier(args.imei, args.fwVersion, args.pad, args.softIndentifier, args.categoryIds, args.excludeCategoryIds, args.size, args.project, args.isLimit);
        oprot.WriteMessageBegin(new TMessage("GetRecommendSoftsBySoftIdentifier", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeRecommendUserUse_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeRecommendUserUse_args args = new GetThemeRecommendUserUse_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeRecommendUserUse_result result = new GetThemeRecommendUserUse_result();
        result.success = iface_.GetThemeRecommendUserUse(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.randomSelect, args.isAdd);
        oprot.WriteMessageBegin(new TMessage("GetThemeRecommendUserUse", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeV6RecommendUserUse_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeV6RecommendUserUse_args args = new GetThemeV6RecommendUserUse_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeV6RecommendUserUse_result result = new GetThemeV6RecommendUserUse_result();
        result.success = iface_.GetThemeV6RecommendUserUse(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.randomSelect, args.isAdd);
        oprot.WriteMessageBegin(new TMessage("GetThemeV6RecommendUserUse", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeRecommendUserUseV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeRecommendUserUseV2_args args = new GetThemeRecommendUserUseV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeRecommendUserUseV2_result result = new GetThemeRecommendUserUseV2_result();
        result.success = iface_.GetThemeRecommendUserUseV2(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.randomSelect, args.isAdd, args.pid, args.clientVer, args.resType, args.pResType, args.minDateTicks, args.proj);
        oprot.WriteMessageBegin(new TMessage("GetThemeRecommendUserUseV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeV6RecommendUserUseV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeV6RecommendUserUseV2_args args = new GetThemeV6RecommendUserUseV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeV6RecommendUserUseV2_result result = new GetThemeV6RecommendUserUseV2_result();
        result.success = iface_.GetThemeV6RecommendUserUseV2(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.randomSelect, args.isAdd, args.pid, args.clientVer, args.resType, args.pResType, args.minDateTicks, args.proj);
        oprot.WriteMessageBegin(new TMessage("GetThemeV6RecommendUserUseV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGoodThemeRecommendUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGoodThemeRecommendUser_args args = new GetGoodThemeRecommendUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGoodThemeRecommendUser_result result = new GetGoodThemeRecommendUser_result();
        result.success = iface_.GetGoodThemeRecommendUser(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.overTimeOption);
        oprot.WriteMessageBegin(new TMessage("GetGoodThemeRecommendUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGoodThemeV6RecommendUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGoodThemeV6RecommendUser_args args = new GetGoodThemeV6RecommendUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGoodThemeV6RecommendUser_result result = new GetGoodThemeV6RecommendUser_result();
        result.success = iface_.GetGoodThemeV6RecommendUser(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.overTimeOption);
        oprot.WriteMessageBegin(new TMessage("GetGoodThemeV6RecommendUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGoodThemeRecommendUserV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGoodThemeRecommendUserV2_args args = new GetGoodThemeRecommendUserV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGoodThemeRecommendUserV2_result result = new GetGoodThemeRecommendUserV2_result();
        result.success = iface_.GetGoodThemeRecommendUserV2(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.overTimeOption, args.pid, args.clientVer, args.resType, args.pResType, args.minDateTicks, args.proj);
        oprot.WriteMessageBegin(new TMessage("GetGoodThemeRecommendUserV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGoodThemeV6RecommendUserV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGoodThemeV6RecommendUserV2_args args = new GetGoodThemeV6RecommendUserV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGoodThemeV6RecommendUserV2_result result = new GetGoodThemeV6RecommendUserV2_result();
        result.success = iface_.GetGoodThemeV6RecommendUserV2(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.overTimeOption, args.pid, args.clientVer, args.resType, args.pResType, args.minDateTicks, args.proj);
        oprot.WriteMessageBegin(new TMessage("GetGoodThemeV6RecommendUserV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeRecommendThemeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeRecommendThemeId_args args = new GetThemeRecommendThemeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeRecommendThemeId_result result = new GetThemeRecommendThemeId_result();
        result.success = iface_.GetThemeRecommendThemeId(args.themeId, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd);
        oprot.WriteMessageBegin(new TMessage("GetThemeRecommendThemeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeV6RecommendThemeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeV6RecommendThemeId_args args = new GetThemeV6RecommendThemeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeV6RecommendThemeId_result result = new GetThemeV6RecommendThemeId_result();
        result.success = iface_.GetThemeV6RecommendThemeId(args.themeId, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd);
        oprot.WriteMessageBegin(new TMessage("GetThemeV6RecommendThemeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeRecommendThemeIdV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeRecommendThemeIdV2_args args = new GetThemeRecommendThemeIdV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeRecommendThemeIdV2_result result = new GetThemeRecommendThemeIdV2_result();
        result.success = iface_.GetThemeRecommendThemeIdV2(args.themeId, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd, args.pid, args.clientVer, args.resType, args.pResType, args.minDateTicks, args.proj);
        oprot.WriteMessageBegin(new TMessage("GetThemeRecommendThemeIdV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeV6RecommendThemeIdV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeV6RecommendThemeIdV2_args args = new GetThemeV6RecommendThemeIdV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeV6RecommendThemeIdV2_result result = new GetThemeV6RecommendThemeIdV2_result();
        result.success = iface_.GetThemeV6RecommendThemeIdV2(args.themeId, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd, args.pid, args.clientVer, args.resType, args.pResType, args.minDateTicks, args.proj);
        oprot.WriteMessageBegin(new TMessage("GetThemeV6RecommendThemeIdV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeSimilarThemeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeSimilarThemeId_args args = new GetThemeSimilarThemeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeSimilarThemeId_result result = new GetThemeSimilarThemeId_result();
        result.success = iface_.GetThemeSimilarThemeId(args.themeId, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd);
        oprot.WriteMessageBegin(new TMessage("GetThemeSimilarThemeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeV6SimilarThemeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeV6SimilarThemeId_args args = new GetThemeV6SimilarThemeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeV6SimilarThemeId_result result = new GetThemeV6SimilarThemeId_result();
        result.success = iface_.GetThemeV6SimilarThemeId(args.themeId, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd);
        oprot.WriteMessageBegin(new TMessage("GetThemeV6SimilarThemeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeSimilarThemeIdV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeSimilarThemeIdV2_args args = new GetThemeSimilarThemeIdV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeSimilarThemeIdV2_result result = new GetThemeSimilarThemeIdV2_result();
        result.success = iface_.GetThemeSimilarThemeIdV2(args.themeId, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd, args.pid, args.clientVer, args.resType, args.pResType, args.minDateTicks, args.proj);
        oprot.WriteMessageBegin(new TMessage("GetThemeSimilarThemeIdV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetThemeV6SimilarThemeIdV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetThemeV6SimilarThemeIdV2_args args = new GetThemeV6SimilarThemeIdV2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetThemeV6SimilarThemeIdV2_result result = new GetThemeV6SimilarThemeIdV2_result();
        result.success = iface_.GetThemeV6SimilarThemeIdV2(args.themeId, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd, args.pid, args.clientVer, args.resType, args.pResType, args.minDateTicks, args.proj);
        oprot.WriteMessageBegin(new TMessage("GetThemeV6SimilarThemeIdV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CalculateThemeRecommendById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CalculateThemeRecommendById_args args = new CalculateThemeRecommendById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CalculateThemeRecommendById_result result = new CalculateThemeRecommendById_result();
        result.success = iface_.CalculateThemeRecommendById(args.themeId);
        oprot.WriteMessageBegin(new TMessage("CalculateThemeRecommendById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetInstalledSoftIdentifiersByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetInstalledSoftIdentifiersByImei_args args = new GetInstalledSoftIdentifiersByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetInstalledSoftIdentifiersByImei_result result = new GetInstalledSoftIdentifiersByImei_result();
        result.success = iface_.GetInstalledSoftIdentifiersByImei(args.imei, args.platform, args.isUninstalled);
        oprot.WriteMessageBegin(new TMessage("GetInstalledSoftIdentifiersByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetInstalledSoftIdsByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetInstalledSoftIdsByImei_args args = new GetInstalledSoftIdsByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetInstalledSoftIdsByImei_result result = new GetInstalledSoftIdsByImei_result();
        result.success = iface_.GetInstalledSoftIdsByImei(args.imei, args.platform, args.isUninstalled);
        oprot.WriteMessageBegin(new TMessage("GetInstalledSoftIdsByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetInstalledSoftIdentifiersByUin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetInstalledSoftIdentifiersByUin_args args = new GetInstalledSoftIdentifiersByUin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetInstalledSoftIdentifiersByUin_result result = new GetInstalledSoftIdentifiersByUin_result();
        result.success = iface_.GetInstalledSoftIdentifiersByUin(args.uin, args.platform, args.excludeImeis);
        oprot.WriteMessageBegin(new TMessage("GetInstalledSoftIdentifiersByUin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetInstalledSoftIdsByUin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetInstalledSoftIdsByUin_args args = new GetInstalledSoftIdsByUin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetInstalledSoftIdsByUin_result result = new GetInstalledSoftIdsByUin_result();
        result.success = iface_.GetInstalledSoftIdsByUin(args.uin, args.platform, args.excludeImeis);
        oprot.WriteMessageBegin(new TMessage("GetInstalledSoftIdsByUin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetSoftRecommendByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetSoftRecommendByImei_args args = new Internal_GetSoftRecommendByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetSoftRecommendByImei_result result = new Internal_GetSoftRecommendByImei_result();
        result.success = iface_.Internal_GetSoftRecommendByImei(args.imei, args.fwVersion, args.pad, args.categoryIds, args.excludeCategoryIds, args.count, args.isLimit, args.isAuthorize, args.project, args.isOldVer, args.processColdBoot, args.addExplanations, args.actionType, args.addIntroReason, args.guessAgain, args.uin, args.filterFilterableSofts, args.cpu);
        oprot.WriteMessageBegin(new TMessage("Internal_GetSoftRecommendByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetPushRecommendByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetPushRecommendByImei_args args = new Internal_GetPushRecommendByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetPushRecommendByImei_result result = new Internal_GetPushRecommendByImei_result();
        result.success = iface_.Internal_GetPushRecommendByImei(args.imei, args.fwVersion, args.pad, args.categoryIds, args.excludeCategoryIds, args.count, args.isLimit, args.isAuthorize, args.project, args.isOldVer, args.processColdBoot, args.addExplanations, args.actionType, args.addIntroReason, args.guessAgain, args.uin, args.filterFilterableSofts, args.cpu);
        oprot.WriteMessageBegin(new TMessage("Internal_GetPushRecommendByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetDirectPushRecommendByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetDirectPushRecommendByImei_args args = new Internal_GetDirectPushRecommendByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetDirectPushRecommendByImei_result result = new Internal_GetDirectPushRecommendByImei_result();
        result.success = iface_.Internal_GetDirectPushRecommendByImei(args.imei, args.fwVersion, args.pad, args.categoryIds, args.excludeCategoryIds, args.count, args.isAuthorize, args.project, args.isOldVer, args.actionType, args.uin, args.cpu);
        oprot.WriteMessageBegin(new TMessage("Internal_GetDirectPushRecommendByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetRecommendSoftsBySoftId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetRecommendSoftsBySoftId_args args = new Internal_GetRecommendSoftsBySoftId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetRecommendSoftsBySoftId_result result = new Internal_GetRecommendSoftsBySoftId_result();
        result.success = iface_.Internal_GetRecommendSoftsBySoftId(args.imei, args.fwVersion, args.pad, args.softId, args.categoryIds, args.excludeCategoryIds, args.count, args.isLimit, args.isAuthorize, args.isOldVer, args.startIndex, args.uin, args.cpu, args.actionType, args.project);
        oprot.WriteMessageBegin(new TMessage("Internal_GetRecommendSoftsBySoftId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetRecommendSoftsExBySoftId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetRecommendSoftsExBySoftId_args args = new Internal_GetRecommendSoftsExBySoftId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetRecommendSoftsExBySoftId_result result = new Internal_GetRecommendSoftsExBySoftId_result();
        result.success = iface_.Internal_GetRecommendSoftsExBySoftId(args.imei, args.fwVersion, args.pad, args.softId, args.categoryIds, args.excludeCategoryIds, args.count, args.isLimit, args.isAuthorize, args.isOldVer, args.startIndex, args.uin, args.cpu, args.explanationType, args.isFillRecommendSofts, args.actionType, args.project);
        oprot.WriteMessageBegin(new TMessage("Internal_GetRecommendSoftsExBySoftId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetRecommendSoftsBySoftIdentifier_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetRecommendSoftsBySoftIdentifier_args args = new Internal_GetRecommendSoftsBySoftIdentifier_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetRecommendSoftsBySoftIdentifier_result result = new Internal_GetRecommendSoftsBySoftIdentifier_result();
        result.success = iface_.Internal_GetRecommendSoftsBySoftIdentifier(args.imei, args.fwVersion, args.pad, args.softIndentifier, args.categoryIds, args.excludeCategoryIds, args.count, args.isLimit, args.isAuthorize, args.isOldVer, args.startIndex, args.uin, args.cpu, args.actionType, args.project);
        oprot.WriteMessageBegin(new TMessage("Internal_GetRecommendSoftsBySoftIdentifier", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetRecommendSoftsExBySoftIdentifier_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetRecommendSoftsExBySoftIdentifier_args args = new Internal_GetRecommendSoftsExBySoftIdentifier_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetRecommendSoftsExBySoftIdentifier_result result = new Internal_GetRecommendSoftsExBySoftIdentifier_result();
        result.success = iface_.Internal_GetRecommendSoftsExBySoftIdentifier(args.imei, args.fwVersion, args.pad, args.softIndentifier, args.categoryIds, args.excludeCategoryIds, args.count, args.isLimit, args.isAuthorize, args.isOldVer, args.startIndex, args.uin, args.cpu, args.explanationType, args.isFillRecommendSofts, args.actionType, args.project);
        oprot.WriteMessageBegin(new TMessage("Internal_GetRecommendSoftsExBySoftIdentifier", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetInstalledSoftByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetInstalledSoftByImei_args args = new Internal_GetInstalledSoftByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetInstalledSoftByImei_result result = new Internal_GetInstalledSoftByImei_result();
        result.success = iface_.Internal_GetInstalledSoftByImei(args.imei, args.fwVersion, args.pad, args.pageSize, args.pageIndex, args.enableCache, args.installedStatus);
        oprot.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetInstalledSoftCountByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetInstalledSoftCountByImei_args args = new Internal_GetInstalledSoftCountByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetInstalledSoftCountByImei_result result = new Internal_GetInstalledSoftCountByImei_result();
        result.success = iface_.Internal_GetInstalledSoftCountByImei(args.imei, args.fwVersion, args.pad);
        oprot.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftCountByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetInstalledSoftByUin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetInstalledSoftByUin_args args = new Internal_GetInstalledSoftByUin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetInstalledSoftByUin_result result = new Internal_GetInstalledSoftByUin_result();
        result.success = iface_.Internal_GetInstalledSoftByUin(args.uin, args.imei, args.fwVersion, args.pad, args.pageSize, args.pageIndex, args.enableCache);
        oprot.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftByUin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetImeisByUin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetImeisByUin_args args = new Internal_GetImeisByUin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetImeisByUin_result result = new Internal_GetImeisByUin_result();
        result.success = iface_.Internal_GetImeisByUin(args.uin, args.fwVersion, args.pad, args.filterByPlatform);
        oprot.WriteMessageBegin(new TMessage("Internal_GetImeisByUin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_UpdateInstalledSoftHideStatusByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_UpdateInstalledSoftHideStatusByImei_args args = new Internal_UpdateInstalledSoftHideStatusByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_UpdateInstalledSoftHideStatusByImei_result result = new Internal_UpdateInstalledSoftHideStatusByImei_result();
        iface_.Internal_UpdateInstalledSoftHideStatusByImei(args.imeis, args.identifiers, args.fwVersion, args.pad, args.hideStatus);
        oprot.WriteMessageBegin(new TMessage("Internal_UpdateInstalledSoftHideStatusByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetInstalledSoftCountByUin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetInstalledSoftCountByUin_args args = new Internal_GetInstalledSoftCountByUin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetInstalledSoftCountByUin_result result = new Internal_GetInstalledSoftCountByUin_result();
        result.success = iface_.Internal_GetInstalledSoftCountByUin(args.uin, args.imei, args.fwVersion, args.pad, args.enableCache);
        oprot.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftCountByUin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_ClearUserSoftware_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_ClearUserSoftware_args args = new Internal_ClearUserSoftware_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_ClearUserSoftware_result result = new Internal_ClearUserSoftware_result();
        iface_.Internal_ClearUserSoftware(args.imei, args.platform);
        oprot.WriteMessageBegin(new TMessage("Internal_ClearUserSoftware", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetLikeOrNotSofts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetLikeOrNotSofts_args args = new Internal_GetLikeOrNotSofts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetLikeOrNotSofts_result result = new Internal_GetLikeOrNotSofts_result();
        result.success = iface_.Internal_GetLikeOrNotSofts(args.uin, args.imei, args.fwVersion, args.pad);
        oprot.WriteMessageBegin(new TMessage("Internal_GetLikeOrNotSofts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetInstalledSoftHideStatusByImeis_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetInstalledSoftHideStatusByImeis_args args = new Internal_GetInstalledSoftHideStatusByImeis_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetInstalledSoftHideStatusByImeis_result result = new Internal_GetInstalledSoftHideStatusByImeis_result();
        result.success = iface_.Internal_GetInstalledSoftHideStatusByImeis(args.imeis, args.fwVersion, args.pad, args.pagesize, args.pageindex, args.installedStatus);
        oprot.WriteMessageBegin(new TMessage("Internal_GetInstalledSoftHideStatusByImeis", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetFilterableSoft_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetFilterableSoft_args args = new Internal_GetFilterableSoft_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetFilterableSoft_result result = new Internal_GetFilterableSoft_result();
        result.success = iface_.Internal_GetFilterableSoft(args.imei, args.fwVersion, args.pad);
        oprot.WriteMessageBegin(new TMessage("Internal_GetFilterableSoft", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetInstalledAndUnInstalledCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetInstalledAndUnInstalledCount_args args = new Internal_GetInstalledAndUnInstalledCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetInstalledAndUnInstalledCount_result result = new Internal_GetInstalledAndUnInstalledCount_result();
        result.success = iface_.Internal_GetInstalledAndUnInstalledCount(args.imei, args.fwVersion, args.pad);
        oprot.WriteMessageBegin(new TMessage("Internal_GetInstalledAndUnInstalledCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetInstalledSofts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetInstalledSofts_args args = new Internal_GetInstalledSofts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetInstalledSofts_result result = new Internal_GetInstalledSofts_result();
        result.success = iface_.Internal_GetInstalledSofts(args.imei, args.fwVersion, args.pad);
        oprot.WriteMessageBegin(new TMessage("Internal_GetInstalledSofts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetEarliestTimeGatherTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetEarliestTimeGatherTime_args args = new Internal_GetEarliestTimeGatherTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetEarliestTimeGatherTime_result result = new Internal_GetEarliestTimeGatherTime_result();
        result.success = iface_.Internal_GetEarliestTimeGatherTime(args.imei, args.fwVersion, args.pad);
        oprot.WriteMessageBegin(new TMessage("Internal_GetEarliestTimeGatherTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetRecommendThemesByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetRecommendThemesByImei_args args = new Internal_GetRecommendThemesByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetRecommendThemesByImei_result result = new Internal_GetRecommendThemesByImei_result();
        result.success = iface_.Internal_GetRecommendThemesByImei(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.randomSelect, args.isAdd, args.channel, args.minDateTicks);
        oprot.WriteMessageBegin(new TMessage("Internal_GetRecommendThemesByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetRecommendThemeV6sByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetRecommendThemeV6sByImei_args args = new Internal_GetRecommendThemeV6sByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetRecommendThemeV6sByImei_result result = new Internal_GetRecommendThemeV6sByImei_result();
        result.success = iface_.Internal_GetRecommendThemeV6sByImei(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.timeOption, args.randomSelect, args.isAdd, args.channel, args.minDateTicks);
        oprot.WriteMessageBegin(new TMessage("Internal_GetRecommendThemeV6sByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetGoodRecommendThemesByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetGoodRecommendThemesByImei_args args = new Internal_GetGoodRecommendThemesByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetGoodRecommendThemesByImei_result result = new Internal_GetGoodRecommendThemesByImei_result();
        result.success = iface_.Internal_GetGoodRecommendThemesByImei(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.overTimeOption, args.channel, args.minDateTicks);
        oprot.WriteMessageBegin(new TMessage("Internal_GetGoodRecommendThemesByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetGoodRecommendThemeV6sByImei_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetGoodRecommendThemeV6sByImei_args args = new Internal_GetGoodRecommendThemeV6sByImei_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetGoodRecommendThemeV6sByImei_result result = new Internal_GetGoodRecommendThemeV6sByImei_result();
        result.success = iface_.Internal_GetGoodRecommendThemeV6sByImei(args.imei, args.fwVersion, args.slicenumber, args.mlicenumber, args.overTimeOption, args.channel, args.minDateTicks);
        oprot.WriteMessageBegin(new TMessage("Internal_GetGoodRecommendThemeV6sByImei", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetRecommendThemesByThemeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetRecommendThemesByThemeId_args args = new Internal_GetRecommendThemesByThemeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetRecommendThemesByThemeId_result result = new Internal_GetRecommendThemesByThemeId_result();
        result.success = iface_.Internal_GetRecommendThemesByThemeId(args.fwVersion, args.themeId, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd, args.arithmetic, args.channel, args.minDateTicks);
        oprot.WriteMessageBegin(new TMessage("Internal_GetRecommendThemesByThemeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetRecommendThemeV6sByThemeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetRecommendThemeV6sByThemeId_args args = new Internal_GetRecommendThemeV6sByThemeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetRecommendThemeV6sByThemeId_result result = new Internal_GetRecommendThemeV6sByThemeId_result();
        result.success = iface_.Internal_GetRecommendThemeV6sByThemeId(args.fwVersion, args.themeId, args.slicenumber, args.mlicenumber, args.timeOption, args.isAdd, args.arithmetic, args.channel, args.minDateTicks);
        oprot.WriteMessageBegin(new TMessage("Internal_GetRecommendThemeV6sByThemeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetThemeV6ByThemeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetThemeV6ByThemeId_args args = new Internal_GetThemeV6ByThemeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetThemeV6ByThemeId_result result = new Internal_GetThemeV6ByThemeId_result();
        result.success = iface_.Internal_GetThemeV6ByThemeId(args.fwVersion, args.themeId);
        oprot.WriteMessageBegin(new TMessage("Internal_GetThemeV6ByThemeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_CalculateThemeRecommendById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_CalculateThemeRecommendById_args args = new Internal_CalculateThemeRecommendById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_CalculateThemeRecommendById_result result = new Internal_CalculateThemeRecommendById_result();
        result.success = iface_.Internal_CalculateThemeRecommendById(args.themeId);
        oprot.WriteMessageBegin(new TMessage("Internal_CalculateThemeRecommendById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_RefreshIdx_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_RefreshIdx_args args = new Internal_RefreshIdx_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_RefreshIdx_result result = new Internal_RefreshIdx_result();
        result.success = iface_.Internal_RefreshIdx(args.file, args.type);
        oprot.WriteMessageBegin(new TMessage("Internal_RefreshIdx", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Internal_GetConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Internal_GetConfig_args args = new Internal_GetConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Internal_GetConfig_result result = new Internal_GetConfig_result();
        result.success = iface_.Internal_GetConfig();
        oprot.WriteMessageBegin(new TMessage("Internal_GetConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSoftRecommendByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _size;
      private int _project;
      private bool _isLimit;
      private bool _guessAgain;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }

      public bool guessAgain
      {
        get
        {
          return _guessAgain;
        }
        set
        {
          __isset.guessAgain = true;
          this._guessAgain = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool size;
        public bool project;
        public bool isLimit;
        public bool guessAgain;
      }

      public GetSoftRecommendByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    int _elem2 = 0;
                    _elem2 = iprot.ReadI32();
                    categoryIds.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list3 = iprot.ReadListBegin();
                  for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    int _elem5 = 0;
                    _elem5 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem5);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                guessAgain = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSoftRecommendByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter6 in categoryIds)
            {
              oprot.WriteI32(_iter6);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter7 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(size);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.guessAgain) {
          field.Name = "guessAgain";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(guessAgain);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSoftRecommendByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",size: ");
        sb.Append(size);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(",guessAgain: ");
        sb.Append(guessAgain);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSoftRecommendByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSoftRecommendByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSoftRecommendByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSoftRecommendByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSoftRecommendWithFilterByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _size;
      private int _project;
      private bool _isLimit;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool size;
        public bool project;
        public bool isLimit;
      }

      public GetSoftRecommendWithFilterByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    int _elem10 = 0;
                    _elem10 = iprot.ReadI32();
                    categoryIds.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list11 = iprot.ReadListBegin();
                  for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                  {
                    int _elem13 = 0;
                    _elem13 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem13);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSoftRecommendWithFilterByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter14 in categoryIds)
            {
              oprot.WriteI32(_iter14);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter15 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter15);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(size);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSoftRecommendWithFilterByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",size: ");
        sb.Append(size);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSoftRecommendWithFilterByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSoftRecommendWithFilterByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSoftRecommendWithFilterByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSoftRecommendWithFilterByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRecommendSoftsBySoftId_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private int _softId;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _size;
      private int _project;
      private bool _isLimit;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public int softId
      {
        get
        {
          return _softId;
        }
        set
        {
          __isset.softId = true;
          this._softId = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool softId;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool size;
        public bool project;
        public bool isLimit;
      }

      public GetRecommendSoftsBySoftId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                softId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    int _elem18 = 0;
                    _elem18 = iprot.ReadI32();
                    categoryIds.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list19 = iprot.ReadListBegin();
                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                  {
                    int _elem21 = 0;
                    _elem21 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem21);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRecommendSoftsBySoftId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (__isset.softId) {
          field.Name = "softId";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(softId);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter22 in categoryIds)
            {
              oprot.WriteI32(_iter22);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter23 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter23);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(size);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRecommendSoftsBySoftId_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",softId: ");
        sb.Append(softId);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",size: ");
        sb.Append(size);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRecommendSoftsBySoftId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRecommendSoftsBySoftId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRecommendSoftsBySoftId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRecommendSoftsBySoftId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRecommendSoftsBySoftIdentifier_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private string _softIndentifier;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _size;
      private int _project;
      private bool _isLimit;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public string softIndentifier
      {
        get
        {
          return _softIndentifier;
        }
        set
        {
          __isset.softIndentifier = true;
          this._softIndentifier = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool softIndentifier;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool size;
        public bool project;
        public bool isLimit;
      }

      public GetRecommendSoftsBySoftIdentifier_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                softIndentifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    int _elem26 = 0;
                    _elem26 = iprot.ReadI32();
                    categoryIds.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list27 = iprot.ReadListBegin();
                  for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                  {
                    int _elem29 = 0;
                    _elem29 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem29);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRecommendSoftsBySoftIdentifier_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (softIndentifier != null && __isset.softIndentifier) {
          field.Name = "softIndentifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(softIndentifier);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter30 in categoryIds)
            {
              oprot.WriteI32(_iter30);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter31 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter31);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(size);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRecommendSoftsBySoftIdentifier_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",softIndentifier: ");
        sb.Append(softIndentifier);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",size: ");
        sb.Append(size);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRecommendSoftsBySoftIdentifier_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRecommendSoftsBySoftIdentifier_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRecommendSoftsBySoftIdentifier_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRecommendSoftsBySoftIdentifier_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeRecommendUserUse_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _randomSelect;
      private bool _isAdd;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool randomSelect
      {
        get
        {
          return _randomSelect;
        }
        set
        {
          __isset.randomSelect = true;
          this._randomSelect = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool randomSelect;
        public bool isAdd;
      }

      public GetThemeRecommendUserUse_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                randomSelect = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeRecommendUserUse_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.randomSelect) {
          field.Name = "randomSelect";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(randomSelect);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeRecommendUserUse_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",randomSelect: ");
        sb.Append(randomSelect);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeRecommendUserUse_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeRecommendUserUse_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeRecommendUserUse_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeRecommendUserUse_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6RecommendUserUse_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _randomSelect;
      private bool _isAdd;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool randomSelect
      {
        get
        {
          return _randomSelect;
        }
        set
        {
          __isset.randomSelect = true;
          this._randomSelect = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool randomSelect;
        public bool isAdd;
      }

      public GetThemeV6RecommendUserUse_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                randomSelect = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6RecommendUserUse_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.randomSelect) {
          field.Name = "randomSelect";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(randomSelect);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6RecommendUserUse_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",randomSelect: ");
        sb.Append(randomSelect);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6RecommendUserUse_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeV6RecommendUserUse_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6RecommendUserUse_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6RecommendUserUse_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeRecommendUserUseV2_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _randomSelect;
      private bool _isAdd;
      private int _pid;
      private int _clientVer;
      private int _resType;
      private int _pResType;
      private long _minDateTicks;
      private int _proj;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool randomSelect
      {
        get
        {
          return _randomSelect;
        }
        set
        {
          __isset.randomSelect = true;
          this._randomSelect = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int pid
      {
        get
        {
          return _pid;
        }
        set
        {
          __isset.pid = true;
          this._pid = value;
        }
      }

      public int clientVer
      {
        get
        {
          return _clientVer;
        }
        set
        {
          __isset.clientVer = true;
          this._clientVer = value;
        }
      }

      public int resType
      {
        get
        {
          return _resType;
        }
        set
        {
          __isset.resType = true;
          this._resType = value;
        }
      }

      public int pResType
      {
        get
        {
          return _pResType;
        }
        set
        {
          __isset.pResType = true;
          this._pResType = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }

      public int proj
      {
        get
        {
          return _proj;
        }
        set
        {
          __isset.proj = true;
          this._proj = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool randomSelect;
        public bool isAdd;
        public bool pid;
        public bool clientVer;
        public bool resType;
        public bool pResType;
        public bool minDateTicks;
        public bool proj;
      }

      public GetThemeRecommendUserUseV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                randomSelect = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                pid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                clientVer = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                resType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                pResType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I32) {
                proj = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeRecommendUserUseV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.randomSelect) {
          field.Name = "randomSelect";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(randomSelect);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.pid) {
          field.Name = "pid";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pid);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientVer) {
          field.Name = "clientVer";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(clientVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.resType) {
          field.Name = "resType";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(resType);
          oprot.WriteFieldEnd();
        }
        if (__isset.pResType) {
          field.Name = "pResType";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pResType);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        if (__isset.proj) {
          field.Name = "proj";
          field.Type = TType.I32;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(proj);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeRecommendUserUseV2_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",randomSelect: ");
        sb.Append(randomSelect);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",pid: ");
        sb.Append(pid);
        sb.Append(",clientVer: ");
        sb.Append(clientVer);
        sb.Append(",resType: ");
        sb.Append(resType);
        sb.Append(",pResType: ");
        sb.Append(pResType);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(",proj: ");
        sb.Append(proj);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeRecommendUserUseV2_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeRecommendUserUseV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeRecommendUserUseV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeRecommendUserUseV2_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6RecommendUserUseV2_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _randomSelect;
      private bool _isAdd;
      private int _pid;
      private int _clientVer;
      private int _resType;
      private int _pResType;
      private long _minDateTicks;
      private int _proj;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool randomSelect
      {
        get
        {
          return _randomSelect;
        }
        set
        {
          __isset.randomSelect = true;
          this._randomSelect = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int pid
      {
        get
        {
          return _pid;
        }
        set
        {
          __isset.pid = true;
          this._pid = value;
        }
      }

      public int clientVer
      {
        get
        {
          return _clientVer;
        }
        set
        {
          __isset.clientVer = true;
          this._clientVer = value;
        }
      }

      public int resType
      {
        get
        {
          return _resType;
        }
        set
        {
          __isset.resType = true;
          this._resType = value;
        }
      }

      public int pResType
      {
        get
        {
          return _pResType;
        }
        set
        {
          __isset.pResType = true;
          this._pResType = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }

      public int proj
      {
        get
        {
          return _proj;
        }
        set
        {
          __isset.proj = true;
          this._proj = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool randomSelect;
        public bool isAdd;
        public bool pid;
        public bool clientVer;
        public bool resType;
        public bool pResType;
        public bool minDateTicks;
        public bool proj;
      }

      public GetThemeV6RecommendUserUseV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                randomSelect = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                pid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                clientVer = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                resType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                pResType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I32) {
                proj = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6RecommendUserUseV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.randomSelect) {
          field.Name = "randomSelect";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(randomSelect);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.pid) {
          field.Name = "pid";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pid);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientVer) {
          field.Name = "clientVer";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(clientVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.resType) {
          field.Name = "resType";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(resType);
          oprot.WriteFieldEnd();
        }
        if (__isset.pResType) {
          field.Name = "pResType";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pResType);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        if (__isset.proj) {
          field.Name = "proj";
          field.Type = TType.I32;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(proj);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6RecommendUserUseV2_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",randomSelect: ");
        sb.Append(randomSelect);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",pid: ");
        sb.Append(pid);
        sb.Append(",clientVer: ");
        sb.Append(clientVer);
        sb.Append(",resType: ");
        sb.Append(resType);
        sb.Append(",pResType: ");
        sb.Append(pResType);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(",proj: ");
        sb.Append(proj);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6RecommendUserUseV2_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeV6RecommendUserUseV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6RecommendUserUseV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6RecommendUserUseV2_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGoodThemeRecommendUser_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _overTimeOption;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int overTimeOption
      {
        get
        {
          return _overTimeOption;
        }
        set
        {
          __isset.overTimeOption = true;
          this._overTimeOption = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool overTimeOption;
      }

      public GetGoodThemeRecommendUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                overTimeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGoodThemeRecommendUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.overTimeOption) {
          field.Name = "overTimeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(overTimeOption);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGoodThemeRecommendUser_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",overTimeOption: ");
        sb.Append(overTimeOption);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGoodThemeRecommendUser_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGoodThemeRecommendUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGoodThemeRecommendUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGoodThemeRecommendUser_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGoodThemeV6RecommendUser_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _overTimeOption;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int overTimeOption
      {
        get
        {
          return _overTimeOption;
        }
        set
        {
          __isset.overTimeOption = true;
          this._overTimeOption = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool overTimeOption;
      }

      public GetGoodThemeV6RecommendUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                overTimeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGoodThemeV6RecommendUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.overTimeOption) {
          field.Name = "overTimeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(overTimeOption);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGoodThemeV6RecommendUser_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",overTimeOption: ");
        sb.Append(overTimeOption);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGoodThemeV6RecommendUser_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGoodThemeV6RecommendUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGoodThemeV6RecommendUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGoodThemeV6RecommendUser_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGoodThemeRecommendUserV2_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _overTimeOption;
      private int _pid;
      private int _clientVer;
      private int _resType;
      private int _pResType;
      private long _minDateTicks;
      private int _proj;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int overTimeOption
      {
        get
        {
          return _overTimeOption;
        }
        set
        {
          __isset.overTimeOption = true;
          this._overTimeOption = value;
        }
      }

      public int pid
      {
        get
        {
          return _pid;
        }
        set
        {
          __isset.pid = true;
          this._pid = value;
        }
      }

      public int clientVer
      {
        get
        {
          return _clientVer;
        }
        set
        {
          __isset.clientVer = true;
          this._clientVer = value;
        }
      }

      public int resType
      {
        get
        {
          return _resType;
        }
        set
        {
          __isset.resType = true;
          this._resType = value;
        }
      }

      public int pResType
      {
        get
        {
          return _pResType;
        }
        set
        {
          __isset.pResType = true;
          this._pResType = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }

      public int proj
      {
        get
        {
          return _proj;
        }
        set
        {
          __isset.proj = true;
          this._proj = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool overTimeOption;
        public bool pid;
        public bool clientVer;
        public bool resType;
        public bool pResType;
        public bool minDateTicks;
        public bool proj;
      }

      public GetGoodThemeRecommendUserV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                overTimeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                pid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                clientVer = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                resType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                pResType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                proj = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGoodThemeRecommendUserV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.overTimeOption) {
          field.Name = "overTimeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(overTimeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.pid) {
          field.Name = "pid";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pid);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientVer) {
          field.Name = "clientVer";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(clientVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.resType) {
          field.Name = "resType";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(resType);
          oprot.WriteFieldEnd();
        }
        if (__isset.pResType) {
          field.Name = "pResType";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pResType);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        if (__isset.proj) {
          field.Name = "proj";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(proj);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGoodThemeRecommendUserV2_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",overTimeOption: ");
        sb.Append(overTimeOption);
        sb.Append(",pid: ");
        sb.Append(pid);
        sb.Append(",clientVer: ");
        sb.Append(clientVer);
        sb.Append(",resType: ");
        sb.Append(resType);
        sb.Append(",pResType: ");
        sb.Append(pResType);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(",proj: ");
        sb.Append(proj);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGoodThemeRecommendUserV2_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGoodThemeRecommendUserV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGoodThemeRecommendUserV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGoodThemeRecommendUserV2_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGoodThemeV6RecommendUserV2_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _overTimeOption;
      private int _pid;
      private int _clientVer;
      private int _resType;
      private int _pResType;
      private long _minDateTicks;
      private int _proj;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int overTimeOption
      {
        get
        {
          return _overTimeOption;
        }
        set
        {
          __isset.overTimeOption = true;
          this._overTimeOption = value;
        }
      }

      public int pid
      {
        get
        {
          return _pid;
        }
        set
        {
          __isset.pid = true;
          this._pid = value;
        }
      }

      public int clientVer
      {
        get
        {
          return _clientVer;
        }
        set
        {
          __isset.clientVer = true;
          this._clientVer = value;
        }
      }

      public int resType
      {
        get
        {
          return _resType;
        }
        set
        {
          __isset.resType = true;
          this._resType = value;
        }
      }

      public int pResType
      {
        get
        {
          return _pResType;
        }
        set
        {
          __isset.pResType = true;
          this._pResType = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }

      public int proj
      {
        get
        {
          return _proj;
        }
        set
        {
          __isset.proj = true;
          this._proj = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool overTimeOption;
        public bool pid;
        public bool clientVer;
        public bool resType;
        public bool pResType;
        public bool minDateTicks;
        public bool proj;
      }

      public GetGoodThemeV6RecommendUserV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                overTimeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                pid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                clientVer = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                resType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                pResType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                proj = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGoodThemeV6RecommendUserV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.overTimeOption) {
          field.Name = "overTimeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(overTimeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.pid) {
          field.Name = "pid";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pid);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientVer) {
          field.Name = "clientVer";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(clientVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.resType) {
          field.Name = "resType";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(resType);
          oprot.WriteFieldEnd();
        }
        if (__isset.pResType) {
          field.Name = "pResType";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pResType);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        if (__isset.proj) {
          field.Name = "proj";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(proj);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGoodThemeV6RecommendUserV2_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",overTimeOption: ");
        sb.Append(overTimeOption);
        sb.Append(",pid: ");
        sb.Append(pid);
        sb.Append(",clientVer: ");
        sb.Append(clientVer);
        sb.Append(",resType: ");
        sb.Append(resType);
        sb.Append(",pResType: ");
        sb.Append(pResType);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(",proj: ");
        sb.Append(proj);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGoodThemeV6RecommendUserV2_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGoodThemeV6RecommendUserV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetGoodThemeV6RecommendUserV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetGoodThemeV6RecommendUserV2_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeRecommendThemeId_args : TBase
    {
      private long _themeId;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
      }

      public GetThemeRecommendThemeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeRecommendThemeId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeRecommendThemeId_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeRecommendThemeId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeRecommendThemeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeRecommendThemeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeRecommendThemeId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6RecommendThemeId_args : TBase
    {
      private long _themeId;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
      }

      public GetThemeV6RecommendThemeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6RecommendThemeId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6RecommendThemeId_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6RecommendThemeId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeV6RecommendThemeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6RecommendThemeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6RecommendThemeId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeRecommendThemeIdV2_args : TBase
    {
      private long _themeId;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;
      private int _pid;
      private int _clientVer;
      private int _resType;
      private int _pResType;
      private long _minDateTicks;
      private int _proj;

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int pid
      {
        get
        {
          return _pid;
        }
        set
        {
          __isset.pid = true;
          this._pid = value;
        }
      }

      public int clientVer
      {
        get
        {
          return _clientVer;
        }
        set
        {
          __isset.clientVer = true;
          this._clientVer = value;
        }
      }

      public int resType
      {
        get
        {
          return _resType;
        }
        set
        {
          __isset.resType = true;
          this._resType = value;
        }
      }

      public int pResType
      {
        get
        {
          return _pResType;
        }
        set
        {
          __isset.pResType = true;
          this._pResType = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }

      public int proj
      {
        get
        {
          return _proj;
        }
        set
        {
          __isset.proj = true;
          this._proj = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
        public bool pid;
        public bool clientVer;
        public bool resType;
        public bool pResType;
        public bool minDateTicks;
        public bool proj;
      }

      public GetThemeRecommendThemeIdV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                pid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                clientVer = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                resType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                pResType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                proj = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeRecommendThemeIdV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.pid) {
          field.Name = "pid";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pid);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientVer) {
          field.Name = "clientVer";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(clientVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.resType) {
          field.Name = "resType";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(resType);
          oprot.WriteFieldEnd();
        }
        if (__isset.pResType) {
          field.Name = "pResType";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pResType);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        if (__isset.proj) {
          field.Name = "proj";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(proj);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeRecommendThemeIdV2_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",pid: ");
        sb.Append(pid);
        sb.Append(",clientVer: ");
        sb.Append(clientVer);
        sb.Append(",resType: ");
        sb.Append(resType);
        sb.Append(",pResType: ");
        sb.Append(pResType);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(",proj: ");
        sb.Append(proj);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeRecommendThemeIdV2_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeRecommendThemeIdV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeRecommendThemeIdV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeRecommendThemeIdV2_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6RecommendThemeIdV2_args : TBase
    {
      private long _themeId;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;
      private int _pid;
      private int _clientVer;
      private int _resType;
      private int _pResType;
      private long _minDateTicks;
      private int _proj;

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int pid
      {
        get
        {
          return _pid;
        }
        set
        {
          __isset.pid = true;
          this._pid = value;
        }
      }

      public int clientVer
      {
        get
        {
          return _clientVer;
        }
        set
        {
          __isset.clientVer = true;
          this._clientVer = value;
        }
      }

      public int resType
      {
        get
        {
          return _resType;
        }
        set
        {
          __isset.resType = true;
          this._resType = value;
        }
      }

      public int pResType
      {
        get
        {
          return _pResType;
        }
        set
        {
          __isset.pResType = true;
          this._pResType = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }

      public int proj
      {
        get
        {
          return _proj;
        }
        set
        {
          __isset.proj = true;
          this._proj = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
        public bool pid;
        public bool clientVer;
        public bool resType;
        public bool pResType;
        public bool minDateTicks;
        public bool proj;
      }

      public GetThemeV6RecommendThemeIdV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                pid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                clientVer = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                resType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                pResType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                proj = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6RecommendThemeIdV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.pid) {
          field.Name = "pid";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pid);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientVer) {
          field.Name = "clientVer";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(clientVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.resType) {
          field.Name = "resType";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(resType);
          oprot.WriteFieldEnd();
        }
        if (__isset.pResType) {
          field.Name = "pResType";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pResType);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        if (__isset.proj) {
          field.Name = "proj";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(proj);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6RecommendThemeIdV2_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",pid: ");
        sb.Append(pid);
        sb.Append(",clientVer: ");
        sb.Append(clientVer);
        sb.Append(",resType: ");
        sb.Append(resType);
        sb.Append(",pResType: ");
        sb.Append(pResType);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(",proj: ");
        sb.Append(proj);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6RecommendThemeIdV2_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeV6RecommendThemeIdV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6RecommendThemeIdV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6RecommendThemeIdV2_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeSimilarThemeId_args : TBase
    {
      private long _themeId;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
      }

      public GetThemeSimilarThemeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeSimilarThemeId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeSimilarThemeId_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeSimilarThemeId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeSimilarThemeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeSimilarThemeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeSimilarThemeId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6SimilarThemeId_args : TBase
    {
      private long _themeId;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
      }

      public GetThemeV6SimilarThemeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6SimilarThemeId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6SimilarThemeId_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6SimilarThemeId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeV6SimilarThemeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6SimilarThemeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6SimilarThemeId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeSimilarThemeIdV2_args : TBase
    {
      private long _themeId;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;
      private int _pid;
      private int _clientVer;
      private int _resType;
      private int _pResType;
      private long _minDateTicks;
      private int _proj;

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int pid
      {
        get
        {
          return _pid;
        }
        set
        {
          __isset.pid = true;
          this._pid = value;
        }
      }

      public int clientVer
      {
        get
        {
          return _clientVer;
        }
        set
        {
          __isset.clientVer = true;
          this._clientVer = value;
        }
      }

      public int resType
      {
        get
        {
          return _resType;
        }
        set
        {
          __isset.resType = true;
          this._resType = value;
        }
      }

      public int pResType
      {
        get
        {
          return _pResType;
        }
        set
        {
          __isset.pResType = true;
          this._pResType = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }

      public int proj
      {
        get
        {
          return _proj;
        }
        set
        {
          __isset.proj = true;
          this._proj = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
        public bool pid;
        public bool clientVer;
        public bool resType;
        public bool pResType;
        public bool minDateTicks;
        public bool proj;
      }

      public GetThemeSimilarThemeIdV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                pid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                clientVer = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                resType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                pResType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                proj = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeSimilarThemeIdV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.pid) {
          field.Name = "pid";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pid);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientVer) {
          field.Name = "clientVer";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(clientVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.resType) {
          field.Name = "resType";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(resType);
          oprot.WriteFieldEnd();
        }
        if (__isset.pResType) {
          field.Name = "pResType";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pResType);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        if (__isset.proj) {
          field.Name = "proj";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(proj);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeSimilarThemeIdV2_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",pid: ");
        sb.Append(pid);
        sb.Append(",clientVer: ");
        sb.Append(clientVer);
        sb.Append(",resType: ");
        sb.Append(resType);
        sb.Append(",pResType: ");
        sb.Append(pResType);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(",proj: ");
        sb.Append(proj);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeSimilarThemeIdV2_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeSimilarThemeIdV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeSimilarThemeIdV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeSimilarThemeIdV2_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6SimilarThemeIdV2_args : TBase
    {
      private long _themeId;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;
      private int _pid;
      private int _clientVer;
      private int _resType;
      private int _pResType;
      private long _minDateTicks;
      private int _proj;

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int pid
      {
        get
        {
          return _pid;
        }
        set
        {
          __isset.pid = true;
          this._pid = value;
        }
      }

      public int clientVer
      {
        get
        {
          return _clientVer;
        }
        set
        {
          __isset.clientVer = true;
          this._clientVer = value;
        }
      }

      public int resType
      {
        get
        {
          return _resType;
        }
        set
        {
          __isset.resType = true;
          this._resType = value;
        }
      }

      public int pResType
      {
        get
        {
          return _pResType;
        }
        set
        {
          __isset.pResType = true;
          this._pResType = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }

      public int proj
      {
        get
        {
          return _proj;
        }
        set
        {
          __isset.proj = true;
          this._proj = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
        public bool pid;
        public bool clientVer;
        public bool resType;
        public bool pResType;
        public bool minDateTicks;
        public bool proj;
      }

      public GetThemeV6SimilarThemeIdV2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                pid = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                clientVer = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                resType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                pResType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                proj = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6SimilarThemeIdV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.pid) {
          field.Name = "pid";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pid);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientVer) {
          field.Name = "clientVer";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(clientVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.resType) {
          field.Name = "resType";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(resType);
          oprot.WriteFieldEnd();
        }
        if (__isset.pResType) {
          field.Name = "pResType";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pResType);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        if (__isset.proj) {
          field.Name = "proj";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(proj);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6SimilarThemeIdV2_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",pid: ");
        sb.Append(pid);
        sb.Append(",clientVer: ");
        sb.Append(clientVer);
        sb.Append(",resType: ");
        sb.Append(resType);
        sb.Append(",pResType: ");
        sb.Append(pResType);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(",proj: ");
        sb.Append(proj);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetThemeV6SimilarThemeIdV2_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetThemeV6SimilarThemeIdV2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetThemeV6SimilarThemeIdV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetThemeV6SimilarThemeIdV2_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CalculateThemeRecommendById_args : TBase
    {
      private int _themeId;

      public int themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
      }

      public CalculateThemeRecommendById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                themeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CalculateThemeRecommendById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(themeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CalculateThemeRecommendById_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CalculateThemeRecommendById_result : TBase
    {
      private int _success;

      public int success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CalculateThemeRecommendById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CalculateThemeRecommendById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CalculateThemeRecommendById_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetInstalledSoftIdentifiersByImei_args : TBase
    {
      private string _imei;
      private int _platform;
      private int _isUninstalled;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      public int isUninstalled
      {
        get
        {
          return _isUninstalled;
        }
        set
        {
          __isset.isUninstalled = true;
          this._isUninstalled = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool platform;
        public bool isUninstalled;
      }

      public GetInstalledSoftIdentifiersByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                platform = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                isUninstalled = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetInstalledSoftIdentifiersByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.platform) {
          field.Name = "platform";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(platform);
          oprot.WriteFieldEnd();
        }
        if (__isset.isUninstalled) {
          field.Name = "isUninstalled";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(isUninstalled);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetInstalledSoftIdentifiersByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",platform: ");
        sb.Append(platform);
        sb.Append(",isUninstalled: ");
        sb.Append(isUninstalled);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetInstalledSoftIdentifiersByImei_result : TBase
    {
      private List<string> _success;

      public List<string> success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetInstalledSoftIdentifiersByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  success = new List<string>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    string _elem34 = null;
                    _elem34 = iprot.ReadString();
                    success.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetInstalledSoftIdentifiersByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, success.Count));
              foreach (string _iter35 in success)
              {
                oprot.WriteString(_iter35);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetInstalledSoftIdentifiersByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetInstalledSoftIdsByImei_args : TBase
    {
      private string _imei;
      private int _platform;
      private int _isUninstalled;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      public int isUninstalled
      {
        get
        {
          return _isUninstalled;
        }
        set
        {
          __isset.isUninstalled = true;
          this._isUninstalled = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool platform;
        public bool isUninstalled;
      }

      public GetInstalledSoftIdsByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                platform = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                isUninstalled = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetInstalledSoftIdsByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.platform) {
          field.Name = "platform";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(platform);
          oprot.WriteFieldEnd();
        }
        if (__isset.isUninstalled) {
          field.Name = "isUninstalled";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(isUninstalled);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetInstalledSoftIdsByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",platform: ");
        sb.Append(platform);
        sb.Append(",isUninstalled: ");
        sb.Append(isUninstalled);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetInstalledSoftIdsByImei_result : TBase
    {
      private List<int> _success;

      public List<int> success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetInstalledSoftIdsByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  success = new List<int>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    int _elem38 = 0;
                    _elem38 = iprot.ReadI32();
                    success.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetInstalledSoftIdsByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, success.Count));
              foreach (int _iter39 in success)
              {
                oprot.WriteI32(_iter39);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetInstalledSoftIdsByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetInstalledSoftIdentifiersByUin_args : TBase
    {
      private long _uin;
      private int _platform;
      private List<string> _excludeImeis;

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public int platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      public List<string> excludeImeis
      {
        get
        {
          return _excludeImeis;
        }
        set
        {
          __isset.excludeImeis = true;
          this._excludeImeis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uin;
        public bool platform;
        public bool excludeImeis;
      }

      public GetInstalledSoftIdentifiersByUin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                platform = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  excludeImeis = new List<string>();
                  TList _list40 = iprot.ReadListBegin();
                  for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    string _elem42 = null;
                    _elem42 = iprot.ReadString();
                    excludeImeis.Add(_elem42);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetInstalledSoftIdentifiersByUin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.platform) {
          field.Name = "platform";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(platform);
          oprot.WriteFieldEnd();
        }
        if (excludeImeis != null && __isset.excludeImeis) {
          field.Name = "excludeImeis";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, excludeImeis.Count));
            foreach (string _iter43 in excludeImeis)
            {
              oprot.WriteString(_iter43);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetInstalledSoftIdentifiersByUin_args(");
        sb.Append("uin: ");
        sb.Append(uin);
        sb.Append(",platform: ");
        sb.Append(platform);
        sb.Append(",excludeImeis: ");
        sb.Append(excludeImeis);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetInstalledSoftIdentifiersByUin_result : TBase
    {
      private List<string> _success;

      public List<string> success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetInstalledSoftIdentifiersByUin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  success = new List<string>();
                  TList _list44 = iprot.ReadListBegin();
                  for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    string _elem46 = null;
                    _elem46 = iprot.ReadString();
                    success.Add(_elem46);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetInstalledSoftIdentifiersByUin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, success.Count));
              foreach (string _iter47 in success)
              {
                oprot.WriteString(_iter47);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetInstalledSoftIdentifiersByUin_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetInstalledSoftIdsByUin_args : TBase
    {
      private long _uin;
      private int _platform;
      private List<string> _excludeImeis;

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public int platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }

      public List<string> excludeImeis
      {
        get
        {
          return _excludeImeis;
        }
        set
        {
          __isset.excludeImeis = true;
          this._excludeImeis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uin;
        public bool platform;
        public bool excludeImeis;
      }

      public GetInstalledSoftIdsByUin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                platform = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  excludeImeis = new List<string>();
                  TList _list48 = iprot.ReadListBegin();
                  for( int _i49 = 0; _i49 < _list48.Count; ++_i49)
                  {
                    string _elem50 = null;
                    _elem50 = iprot.ReadString();
                    excludeImeis.Add(_elem50);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetInstalledSoftIdsByUin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.platform) {
          field.Name = "platform";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(platform);
          oprot.WriteFieldEnd();
        }
        if (excludeImeis != null && __isset.excludeImeis) {
          field.Name = "excludeImeis";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, excludeImeis.Count));
            foreach (string _iter51 in excludeImeis)
            {
              oprot.WriteString(_iter51);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetInstalledSoftIdsByUin_args(");
        sb.Append("uin: ");
        sb.Append(uin);
        sb.Append(",platform: ");
        sb.Append(platform);
        sb.Append(",excludeImeis: ");
        sb.Append(excludeImeis);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetInstalledSoftIdsByUin_result : TBase
    {
      private List<int> _success;

      public List<int> success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetInstalledSoftIdsByUin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  success = new List<int>();
                  TList _list52 = iprot.ReadListBegin();
                  for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                  {
                    int _elem54 = 0;
                    _elem54 = iprot.ReadI32();
                    success.Add(_elem54);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetInstalledSoftIdsByUin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, success.Count));
              foreach (int _iter55 in success)
              {
                oprot.WriteI32(_iter55);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetInstalledSoftIdsByUin_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetSoftRecommendByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _count;
      private bool _isLimit;
      private int _isAuthorize;
      private int _project;
      private bool _isOldVer;
      private bool _processColdBoot;
      private bool _addExplanations;
      private int _actionType;
      private bool _addIntroReason;
      private bool _guessAgain;
      private long _uin;
      private bool _filterFilterableSofts;
      private int _cpu;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }

      public int isAuthorize
      {
        get
        {
          return _isAuthorize;
        }
        set
        {
          __isset.isAuthorize = true;
          this._isAuthorize = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }

      public bool isOldVer
      {
        get
        {
          return _isOldVer;
        }
        set
        {
          __isset.isOldVer = true;
          this._isOldVer = value;
        }
      }

      public bool processColdBoot
      {
        get
        {
          return _processColdBoot;
        }
        set
        {
          __isset.processColdBoot = true;
          this._processColdBoot = value;
        }
      }

      public bool addExplanations
      {
        get
        {
          return _addExplanations;
        }
        set
        {
          __isset.addExplanations = true;
          this._addExplanations = value;
        }
      }

      public int actionType
      {
        get
        {
          return _actionType;
        }
        set
        {
          __isset.actionType = true;
          this._actionType = value;
        }
      }

      public bool addIntroReason
      {
        get
        {
          return _addIntroReason;
        }
        set
        {
          __isset.addIntroReason = true;
          this._addIntroReason = value;
        }
      }

      public bool guessAgain
      {
        get
        {
          return _guessAgain;
        }
        set
        {
          __isset.guessAgain = true;
          this._guessAgain = value;
        }
      }

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public bool filterFilterableSofts
      {
        get
        {
          return _filterFilterableSofts;
        }
        set
        {
          __isset.filterFilterableSofts = true;
          this._filterFilterableSofts = value;
        }
      }

      public int cpu
      {
        get
        {
          return _cpu;
        }
        set
        {
          __isset.cpu = true;
          this._cpu = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool count;
        public bool isLimit;
        public bool isAuthorize;
        public bool project;
        public bool isOldVer;
        public bool processColdBoot;
        public bool addExplanations;
        public bool actionType;
        public bool addIntroReason;
        public bool guessAgain;
        public bool uin;
        public bool filterFilterableSofts;
        public bool cpu;
      }

      public Internal_GetSoftRecommendByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list56 = iprot.ReadListBegin();
                  for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                  {
                    int _elem58 = 0;
                    _elem58 = iprot.ReadI32();
                    categoryIds.Add(_elem58);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list59 = iprot.ReadListBegin();
                  for( int _i60 = 0; _i60 < _list59.Count; ++_i60)
                  {
                    int _elem61 = 0;
                    _elem61 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem61);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                isAuthorize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                isOldVer = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                processColdBoot = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                addExplanations = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I32) {
                actionType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Bool) {
                addIntroReason = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Bool) {
                guessAgain = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Bool) {
                filterFilterableSofts = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.I32) {
                cpu = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetSoftRecommendByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter62 in categoryIds)
            {
              oprot.WriteI32(_iter62);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter63 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter63);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(count);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAuthorize) {
          field.Name = "isAuthorize";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(isAuthorize);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        if (__isset.isOldVer) {
          field.Name = "isOldVer";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isOldVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.processColdBoot) {
          field.Name = "processColdBoot";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(processColdBoot);
          oprot.WriteFieldEnd();
        }
        if (__isset.addExplanations) {
          field.Name = "addExplanations";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(addExplanations);
          oprot.WriteFieldEnd();
        }
        if (__isset.actionType) {
          field.Name = "actionType";
          field.Type = TType.I32;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(actionType);
          oprot.WriteFieldEnd();
        }
        if (__isset.addIntroReason) {
          field.Name = "addIntroReason";
          field.Type = TType.Bool;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(addIntroReason);
          oprot.WriteFieldEnd();
        }
        if (__isset.guessAgain) {
          field.Name = "guessAgain";
          field.Type = TType.Bool;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(guessAgain);
          oprot.WriteFieldEnd();
        }
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.filterFilterableSofts) {
          field.Name = "filterFilterableSofts";
          field.Type = TType.Bool;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(filterFilterableSofts);
          oprot.WriteFieldEnd();
        }
        if (__isset.cpu) {
          field.Name = "cpu";
          field.Type = TType.I32;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(cpu);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetSoftRecommendByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",count: ");
        sb.Append(count);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(",isAuthorize: ");
        sb.Append(isAuthorize);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(",isOldVer: ");
        sb.Append(isOldVer);
        sb.Append(",processColdBoot: ");
        sb.Append(processColdBoot);
        sb.Append(",addExplanations: ");
        sb.Append(addExplanations);
        sb.Append(",actionType: ");
        sb.Append(actionType);
        sb.Append(",addIntroReason: ");
        sb.Append(addIntroReason);
        sb.Append(",guessAgain: ");
        sb.Append(guessAgain);
        sb.Append(",uin: ");
        sb.Append(uin);
        sb.Append(",filterFilterableSofts: ");
        sb.Append(filterFilterableSofts);
        sb.Append(",cpu: ");
        sb.Append(cpu);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetSoftRecommendByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetSoftRecommendByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetSoftRecommendByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetSoftRecommendByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetPushRecommendByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _count;
      private bool _isLimit;
      private int _isAuthorize;
      private int _project;
      private bool _isOldVer;
      private bool _processColdBoot;
      private bool _addExplanations;
      private int _actionType;
      private bool _addIntroReason;
      private bool _guessAgain;
      private long _uin;
      private bool _filterFilterableSofts;
      private int _cpu;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }

      public int isAuthorize
      {
        get
        {
          return _isAuthorize;
        }
        set
        {
          __isset.isAuthorize = true;
          this._isAuthorize = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }

      public bool isOldVer
      {
        get
        {
          return _isOldVer;
        }
        set
        {
          __isset.isOldVer = true;
          this._isOldVer = value;
        }
      }

      public bool processColdBoot
      {
        get
        {
          return _processColdBoot;
        }
        set
        {
          __isset.processColdBoot = true;
          this._processColdBoot = value;
        }
      }

      public bool addExplanations
      {
        get
        {
          return _addExplanations;
        }
        set
        {
          __isset.addExplanations = true;
          this._addExplanations = value;
        }
      }

      public int actionType
      {
        get
        {
          return _actionType;
        }
        set
        {
          __isset.actionType = true;
          this._actionType = value;
        }
      }

      public bool addIntroReason
      {
        get
        {
          return _addIntroReason;
        }
        set
        {
          __isset.addIntroReason = true;
          this._addIntroReason = value;
        }
      }

      public bool guessAgain
      {
        get
        {
          return _guessAgain;
        }
        set
        {
          __isset.guessAgain = true;
          this._guessAgain = value;
        }
      }

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public bool filterFilterableSofts
      {
        get
        {
          return _filterFilterableSofts;
        }
        set
        {
          __isset.filterFilterableSofts = true;
          this._filterFilterableSofts = value;
        }
      }

      public int cpu
      {
        get
        {
          return _cpu;
        }
        set
        {
          __isset.cpu = true;
          this._cpu = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool count;
        public bool isLimit;
        public bool isAuthorize;
        public bool project;
        public bool isOldVer;
        public bool processColdBoot;
        public bool addExplanations;
        public bool actionType;
        public bool addIntroReason;
        public bool guessAgain;
        public bool uin;
        public bool filterFilterableSofts;
        public bool cpu;
      }

      public Internal_GetPushRecommendByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list64 = iprot.ReadListBegin();
                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)
                  {
                    int _elem66 = 0;
                    _elem66 = iprot.ReadI32();
                    categoryIds.Add(_elem66);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list67 = iprot.ReadListBegin();
                  for( int _i68 = 0; _i68 < _list67.Count; ++_i68)
                  {
                    int _elem69 = 0;
                    _elem69 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem69);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                isAuthorize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                isOldVer = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                processColdBoot = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                addExplanations = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I32) {
                actionType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Bool) {
                addIntroReason = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Bool) {
                guessAgain = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Bool) {
                filterFilterableSofts = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.I32) {
                cpu = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetPushRecommendByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter70 in categoryIds)
            {
              oprot.WriteI32(_iter70);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter71 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter71);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(count);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAuthorize) {
          field.Name = "isAuthorize";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(isAuthorize);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        if (__isset.isOldVer) {
          field.Name = "isOldVer";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isOldVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.processColdBoot) {
          field.Name = "processColdBoot";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(processColdBoot);
          oprot.WriteFieldEnd();
        }
        if (__isset.addExplanations) {
          field.Name = "addExplanations";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(addExplanations);
          oprot.WriteFieldEnd();
        }
        if (__isset.actionType) {
          field.Name = "actionType";
          field.Type = TType.I32;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(actionType);
          oprot.WriteFieldEnd();
        }
        if (__isset.addIntroReason) {
          field.Name = "addIntroReason";
          field.Type = TType.Bool;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(addIntroReason);
          oprot.WriteFieldEnd();
        }
        if (__isset.guessAgain) {
          field.Name = "guessAgain";
          field.Type = TType.Bool;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(guessAgain);
          oprot.WriteFieldEnd();
        }
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.filterFilterableSofts) {
          field.Name = "filterFilterableSofts";
          field.Type = TType.Bool;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(filterFilterableSofts);
          oprot.WriteFieldEnd();
        }
        if (__isset.cpu) {
          field.Name = "cpu";
          field.Type = TType.I32;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(cpu);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetPushRecommendByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",count: ");
        sb.Append(count);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(",isAuthorize: ");
        sb.Append(isAuthorize);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(",isOldVer: ");
        sb.Append(isOldVer);
        sb.Append(",processColdBoot: ");
        sb.Append(processColdBoot);
        sb.Append(",addExplanations: ");
        sb.Append(addExplanations);
        sb.Append(",actionType: ");
        sb.Append(actionType);
        sb.Append(",addIntroReason: ");
        sb.Append(addIntroReason);
        sb.Append(",guessAgain: ");
        sb.Append(guessAgain);
        sb.Append(",uin: ");
        sb.Append(uin);
        sb.Append(",filterFilterableSofts: ");
        sb.Append(filterFilterableSofts);
        sb.Append(",cpu: ");
        sb.Append(cpu);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetPushRecommendByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetPushRecommendByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetPushRecommendByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetPushRecommendByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetDirectPushRecommendByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _count;
      private int _isAuthorize;
      private int _project;
      private bool _isOldVer;
      private int _actionType;
      private long _uin;
      private int _cpu;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }

      public int isAuthorize
      {
        get
        {
          return _isAuthorize;
        }
        set
        {
          __isset.isAuthorize = true;
          this._isAuthorize = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }

      public bool isOldVer
      {
        get
        {
          return _isOldVer;
        }
        set
        {
          __isset.isOldVer = true;
          this._isOldVer = value;
        }
      }

      public int actionType
      {
        get
        {
          return _actionType;
        }
        set
        {
          __isset.actionType = true;
          this._actionType = value;
        }
      }

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public int cpu
      {
        get
        {
          return _cpu;
        }
        set
        {
          __isset.cpu = true;
          this._cpu = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool count;
        public bool isAuthorize;
        public bool project;
        public bool isOldVer;
        public bool actionType;
        public bool uin;
        public bool cpu;
      }

      public Internal_GetDirectPushRecommendByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list72 = iprot.ReadListBegin();
                  for( int _i73 = 0; _i73 < _list72.Count; ++_i73)
                  {
                    int _elem74 = 0;
                    _elem74 = iprot.ReadI32();
                    categoryIds.Add(_elem74);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list75 = iprot.ReadListBegin();
                  for( int _i76 = 0; _i76 < _list75.Count; ++_i76)
                  {
                    int _elem77 = 0;
                    _elem77 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem77);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                isAuthorize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                isOldVer = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                actionType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                cpu = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetDirectPushRecommendByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter78 in categoryIds)
            {
              oprot.WriteI32(_iter78);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter79 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter79);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(count);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAuthorize) {
          field.Name = "isAuthorize";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(isAuthorize);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        if (__isset.isOldVer) {
          field.Name = "isOldVer";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isOldVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.actionType) {
          field.Name = "actionType";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(actionType);
          oprot.WriteFieldEnd();
        }
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.cpu) {
          field.Name = "cpu";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(cpu);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetDirectPushRecommendByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",count: ");
        sb.Append(count);
        sb.Append(",isAuthorize: ");
        sb.Append(isAuthorize);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(",isOldVer: ");
        sb.Append(isOldVer);
        sb.Append(",actionType: ");
        sb.Append(actionType);
        sb.Append(",uin: ");
        sb.Append(uin);
        sb.Append(",cpu: ");
        sb.Append(cpu);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetDirectPushRecommendByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetDirectPushRecommendByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetDirectPushRecommendByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetDirectPushRecommendByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendSoftsBySoftId_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private int _softId;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _count;
      private bool _isLimit;
      private int _isAuthorize;
      private bool _isOldVer;
      private int _startIndex;
      private long _uin;
      private int _cpu;
      private int _actionType;
      private int _project;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public int softId
      {
        get
        {
          return _softId;
        }
        set
        {
          __isset.softId = true;
          this._softId = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }

      public int isAuthorize
      {
        get
        {
          return _isAuthorize;
        }
        set
        {
          __isset.isAuthorize = true;
          this._isAuthorize = value;
        }
      }

      public bool isOldVer
      {
        get
        {
          return _isOldVer;
        }
        set
        {
          __isset.isOldVer = true;
          this._isOldVer = value;
        }
      }

      public int startIndex
      {
        get
        {
          return _startIndex;
        }
        set
        {
          __isset.startIndex = true;
          this._startIndex = value;
        }
      }

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public int cpu
      {
        get
        {
          return _cpu;
        }
        set
        {
          __isset.cpu = true;
          this._cpu = value;
        }
      }

      public int actionType
      {
        get
        {
          return _actionType;
        }
        set
        {
          __isset.actionType = true;
          this._actionType = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool softId;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool count;
        public bool isLimit;
        public bool isAuthorize;
        public bool isOldVer;
        public bool startIndex;
        public bool uin;
        public bool cpu;
        public bool actionType;
        public bool project;
      }

      public Internal_GetRecommendSoftsBySoftId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                softId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list80 = iprot.ReadListBegin();
                  for( int _i81 = 0; _i81 < _list80.Count; ++_i81)
                  {
                    int _elem82 = 0;
                    _elem82 = iprot.ReadI32();
                    categoryIds.Add(_elem82);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list83 = iprot.ReadListBegin();
                  for( int _i84 = 0; _i84 < _list83.Count; ++_i84)
                  {
                    int _elem85 = 0;
                    _elem85 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem85);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                isAuthorize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                isOldVer = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                startIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I32) {
                cpu = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I32) {
                actionType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendSoftsBySoftId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (__isset.softId) {
          field.Name = "softId";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(softId);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter86 in categoryIds)
            {
              oprot.WriteI32(_iter86);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter87 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter87);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(count);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAuthorize) {
          field.Name = "isAuthorize";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(isAuthorize);
          oprot.WriteFieldEnd();
        }
        if (__isset.isOldVer) {
          field.Name = "isOldVer";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isOldVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.startIndex) {
          field.Name = "startIndex";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(startIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.cpu) {
          field.Name = "cpu";
          field.Type = TType.I32;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(cpu);
          oprot.WriteFieldEnd();
        }
        if (__isset.actionType) {
          field.Name = "actionType";
          field.Type = TType.I32;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(actionType);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendSoftsBySoftId_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",softId: ");
        sb.Append(softId);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",count: ");
        sb.Append(count);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(",isAuthorize: ");
        sb.Append(isAuthorize);
        sb.Append(",isOldVer: ");
        sb.Append(isOldVer);
        sb.Append(",startIndex: ");
        sb.Append(startIndex);
        sb.Append(",uin: ");
        sb.Append(uin);
        sb.Append(",cpu: ");
        sb.Append(cpu);
        sb.Append(",actionType: ");
        sb.Append(actionType);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendSoftsBySoftId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetRecommendSoftsBySoftId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendSoftsBySoftId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendSoftsBySoftId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendSoftsExBySoftId_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private int _softId;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _count;
      private bool _isLimit;
      private int _isAuthorize;
      private bool _isOldVer;
      private int _startIndex;
      private long _uin;
      private int _cpu;
      private int _explanationType;
      private bool _isFillRecommendSofts;
      private int _actionType;
      private int _project;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public int softId
      {
        get
        {
          return _softId;
        }
        set
        {
          __isset.softId = true;
          this._softId = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }

      public int isAuthorize
      {
        get
        {
          return _isAuthorize;
        }
        set
        {
          __isset.isAuthorize = true;
          this._isAuthorize = value;
        }
      }

      public bool isOldVer
      {
        get
        {
          return _isOldVer;
        }
        set
        {
          __isset.isOldVer = true;
          this._isOldVer = value;
        }
      }

      public int startIndex
      {
        get
        {
          return _startIndex;
        }
        set
        {
          __isset.startIndex = true;
          this._startIndex = value;
        }
      }

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public int cpu
      {
        get
        {
          return _cpu;
        }
        set
        {
          __isset.cpu = true;
          this._cpu = value;
        }
      }

      public int explanationType
      {
        get
        {
          return _explanationType;
        }
        set
        {
          __isset.explanationType = true;
          this._explanationType = value;
        }
      }

      public bool isFillRecommendSofts
      {
        get
        {
          return _isFillRecommendSofts;
        }
        set
        {
          __isset.isFillRecommendSofts = true;
          this._isFillRecommendSofts = value;
        }
      }

      public int actionType
      {
        get
        {
          return _actionType;
        }
        set
        {
          __isset.actionType = true;
          this._actionType = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool softId;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool count;
        public bool isLimit;
        public bool isAuthorize;
        public bool isOldVer;
        public bool startIndex;
        public bool uin;
        public bool cpu;
        public bool explanationType;
        public bool isFillRecommendSofts;
        public bool actionType;
        public bool project;
      }

      public Internal_GetRecommendSoftsExBySoftId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                softId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list88 = iprot.ReadListBegin();
                  for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                  {
                    int _elem90 = 0;
                    _elem90 = iprot.ReadI32();
                    categoryIds.Add(_elem90);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list91 = iprot.ReadListBegin();
                  for( int _i92 = 0; _i92 < _list91.Count; ++_i92)
                  {
                    int _elem93 = 0;
                    _elem93 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem93);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                isAuthorize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                isOldVer = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                startIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I32) {
                cpu = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I32) {
                explanationType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Bool) {
                isFillRecommendSofts = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.I32) {
                actionType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendSoftsExBySoftId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (__isset.softId) {
          field.Name = "softId";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(softId);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter94 in categoryIds)
            {
              oprot.WriteI32(_iter94);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter95 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter95);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(count);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAuthorize) {
          field.Name = "isAuthorize";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(isAuthorize);
          oprot.WriteFieldEnd();
        }
        if (__isset.isOldVer) {
          field.Name = "isOldVer";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isOldVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.startIndex) {
          field.Name = "startIndex";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(startIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.cpu) {
          field.Name = "cpu";
          field.Type = TType.I32;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(cpu);
          oprot.WriteFieldEnd();
        }
        if (__isset.explanationType) {
          field.Name = "explanationType";
          field.Type = TType.I32;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(explanationType);
          oprot.WriteFieldEnd();
        }
        if (__isset.isFillRecommendSofts) {
          field.Name = "isFillRecommendSofts";
          field.Type = TType.Bool;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isFillRecommendSofts);
          oprot.WriteFieldEnd();
        }
        if (__isset.actionType) {
          field.Name = "actionType";
          field.Type = TType.I32;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(actionType);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendSoftsExBySoftId_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",softId: ");
        sb.Append(softId);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",count: ");
        sb.Append(count);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(",isAuthorize: ");
        sb.Append(isAuthorize);
        sb.Append(",isOldVer: ");
        sb.Append(isOldVer);
        sb.Append(",startIndex: ");
        sb.Append(startIndex);
        sb.Append(",uin: ");
        sb.Append(uin);
        sb.Append(",cpu: ");
        sb.Append(cpu);
        sb.Append(",explanationType: ");
        sb.Append(explanationType);
        sb.Append(",isFillRecommendSofts: ");
        sb.Append(isFillRecommendSofts);
        sb.Append(",actionType: ");
        sb.Append(actionType);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendSoftsExBySoftId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetRecommendSoftsExBySoftId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendSoftsExBySoftId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendSoftsExBySoftId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendSoftsBySoftIdentifier_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private string _softIndentifier;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _count;
      private bool _isLimit;
      private int _isAuthorize;
      private bool _isOldVer;
      private int _startIndex;
      private long _uin;
      private int _cpu;
      private int _actionType;
      private int _project;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public string softIndentifier
      {
        get
        {
          return _softIndentifier;
        }
        set
        {
          __isset.softIndentifier = true;
          this._softIndentifier = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }

      public int isAuthorize
      {
        get
        {
          return _isAuthorize;
        }
        set
        {
          __isset.isAuthorize = true;
          this._isAuthorize = value;
        }
      }

      public bool isOldVer
      {
        get
        {
          return _isOldVer;
        }
        set
        {
          __isset.isOldVer = true;
          this._isOldVer = value;
        }
      }

      public int startIndex
      {
        get
        {
          return _startIndex;
        }
        set
        {
          __isset.startIndex = true;
          this._startIndex = value;
        }
      }

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public int cpu
      {
        get
        {
          return _cpu;
        }
        set
        {
          __isset.cpu = true;
          this._cpu = value;
        }
      }

      public int actionType
      {
        get
        {
          return _actionType;
        }
        set
        {
          __isset.actionType = true;
          this._actionType = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool softIndentifier;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool count;
        public bool isLimit;
        public bool isAuthorize;
        public bool isOldVer;
        public bool startIndex;
        public bool uin;
        public bool cpu;
        public bool actionType;
        public bool project;
      }

      public Internal_GetRecommendSoftsBySoftIdentifier_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                softIndentifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list96 = iprot.ReadListBegin();
                  for( int _i97 = 0; _i97 < _list96.Count; ++_i97)
                  {
                    int _elem98 = 0;
                    _elem98 = iprot.ReadI32();
                    categoryIds.Add(_elem98);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list99 = iprot.ReadListBegin();
                  for( int _i100 = 0; _i100 < _list99.Count; ++_i100)
                  {
                    int _elem101 = 0;
                    _elem101 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem101);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                isAuthorize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                isOldVer = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                startIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I32) {
                cpu = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I32) {
                actionType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendSoftsBySoftIdentifier_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (softIndentifier != null && __isset.softIndentifier) {
          field.Name = "softIndentifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(softIndentifier);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter102 in categoryIds)
            {
              oprot.WriteI32(_iter102);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter103 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter103);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(count);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAuthorize) {
          field.Name = "isAuthorize";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(isAuthorize);
          oprot.WriteFieldEnd();
        }
        if (__isset.isOldVer) {
          field.Name = "isOldVer";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isOldVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.startIndex) {
          field.Name = "startIndex";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(startIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.cpu) {
          field.Name = "cpu";
          field.Type = TType.I32;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(cpu);
          oprot.WriteFieldEnd();
        }
        if (__isset.actionType) {
          field.Name = "actionType";
          field.Type = TType.I32;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(actionType);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendSoftsBySoftIdentifier_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",softIndentifier: ");
        sb.Append(softIndentifier);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",count: ");
        sb.Append(count);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(",isAuthorize: ");
        sb.Append(isAuthorize);
        sb.Append(",isOldVer: ");
        sb.Append(isOldVer);
        sb.Append(",startIndex: ");
        sb.Append(startIndex);
        sb.Append(",uin: ");
        sb.Append(uin);
        sb.Append(",cpu: ");
        sb.Append(cpu);
        sb.Append(",actionType: ");
        sb.Append(actionType);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendSoftsBySoftIdentifier_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetRecommendSoftsBySoftIdentifier_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendSoftsBySoftIdentifier_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendSoftsBySoftIdentifier_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendSoftsExBySoftIdentifier_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private string _softIndentifier;
      private List<int> _categoryIds;
      private List<int> _excludeCategoryIds;
      private int _count;
      private bool _isLimit;
      private int _isAuthorize;
      private bool _isOldVer;
      private int _startIndex;
      private long _uin;
      private int _cpu;
      private int _explanationType;
      private bool _isFillRecommendSofts;
      private int _actionType;
      private int _project;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public string softIndentifier
      {
        get
        {
          return _softIndentifier;
        }
        set
        {
          __isset.softIndentifier = true;
          this._softIndentifier = value;
        }
      }

      public List<int> categoryIds
      {
        get
        {
          return _categoryIds;
        }
        set
        {
          __isset.categoryIds = true;
          this._categoryIds = value;
        }
      }

      public List<int> excludeCategoryIds
      {
        get
        {
          return _excludeCategoryIds;
        }
        set
        {
          __isset.excludeCategoryIds = true;
          this._excludeCategoryIds = value;
        }
      }

      public int count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }

      public bool isLimit
      {
        get
        {
          return _isLimit;
        }
        set
        {
          __isset.isLimit = true;
          this._isLimit = value;
        }
      }

      public int isAuthorize
      {
        get
        {
          return _isAuthorize;
        }
        set
        {
          __isset.isAuthorize = true;
          this._isAuthorize = value;
        }
      }

      public bool isOldVer
      {
        get
        {
          return _isOldVer;
        }
        set
        {
          __isset.isOldVer = true;
          this._isOldVer = value;
        }
      }

      public int startIndex
      {
        get
        {
          return _startIndex;
        }
        set
        {
          __isset.startIndex = true;
          this._startIndex = value;
        }
      }

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public int cpu
      {
        get
        {
          return _cpu;
        }
        set
        {
          __isset.cpu = true;
          this._cpu = value;
        }
      }

      public int explanationType
      {
        get
        {
          return _explanationType;
        }
        set
        {
          __isset.explanationType = true;
          this._explanationType = value;
        }
      }

      public bool isFillRecommendSofts
      {
        get
        {
          return _isFillRecommendSofts;
        }
        set
        {
          __isset.isFillRecommendSofts = true;
          this._isFillRecommendSofts = value;
        }
      }

      public int actionType
      {
        get
        {
          return _actionType;
        }
        set
        {
          __isset.actionType = true;
          this._actionType = value;
        }
      }

      public int project
      {
        get
        {
          return _project;
        }
        set
        {
          __isset.project = true;
          this._project = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool softIndentifier;
        public bool categoryIds;
        public bool excludeCategoryIds;
        public bool count;
        public bool isLimit;
        public bool isAuthorize;
        public bool isOldVer;
        public bool startIndex;
        public bool uin;
        public bool cpu;
        public bool explanationType;
        public bool isFillRecommendSofts;
        public bool actionType;
        public bool project;
      }

      public Internal_GetRecommendSoftsExBySoftIdentifier_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                softIndentifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  categoryIds = new List<int>();
                  TList _list104 = iprot.ReadListBegin();
                  for( int _i105 = 0; _i105 < _list104.Count; ++_i105)
                  {
                    int _elem106 = 0;
                    _elem106 = iprot.ReadI32();
                    categoryIds.Add(_elem106);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  excludeCategoryIds = new List<int>();
                  TList _list107 = iprot.ReadListBegin();
                  for( int _i108 = 0; _i108 < _list107.Count; ++_i108)
                  {
                    int _elem109 = 0;
                    _elem109 = iprot.ReadI32();
                    excludeCategoryIds.Add(_elem109);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                isLimit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                isAuthorize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                isOldVer = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                startIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I32) {
                cpu = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I32) {
                explanationType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Bool) {
                isFillRecommendSofts = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.I32) {
                actionType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.I32) {
                project = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendSoftsExBySoftIdentifier_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (softIndentifier != null && __isset.softIndentifier) {
          field.Name = "softIndentifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(softIndentifier);
          oprot.WriteFieldEnd();
        }
        if (categoryIds != null && __isset.categoryIds) {
          field.Name = "categoryIds";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, categoryIds.Count));
            foreach (int _iter110 in categoryIds)
            {
              oprot.WriteI32(_iter110);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (excludeCategoryIds != null && __isset.excludeCategoryIds) {
          field.Name = "excludeCategoryIds";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, excludeCategoryIds.Count));
            foreach (int _iter111 in excludeCategoryIds)
            {
              oprot.WriteI32(_iter111);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(count);
          oprot.WriteFieldEnd();
        }
        if (__isset.isLimit) {
          field.Name = "isLimit";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAuthorize) {
          field.Name = "isAuthorize";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(isAuthorize);
          oprot.WriteFieldEnd();
        }
        if (__isset.isOldVer) {
          field.Name = "isOldVer";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isOldVer);
          oprot.WriteFieldEnd();
        }
        if (__isset.startIndex) {
          field.Name = "startIndex";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(startIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.cpu) {
          field.Name = "cpu";
          field.Type = TType.I32;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(cpu);
          oprot.WriteFieldEnd();
        }
        if (__isset.explanationType) {
          field.Name = "explanationType";
          field.Type = TType.I32;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(explanationType);
          oprot.WriteFieldEnd();
        }
        if (__isset.isFillRecommendSofts) {
          field.Name = "isFillRecommendSofts";
          field.Type = TType.Bool;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isFillRecommendSofts);
          oprot.WriteFieldEnd();
        }
        if (__isset.actionType) {
          field.Name = "actionType";
          field.Type = TType.I32;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(actionType);
          oprot.WriteFieldEnd();
        }
        if (__isset.project) {
          field.Name = "project";
          field.Type = TType.I32;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(project);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendSoftsExBySoftIdentifier_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",softIndentifier: ");
        sb.Append(softIndentifier);
        sb.Append(",categoryIds: ");
        sb.Append(categoryIds);
        sb.Append(",excludeCategoryIds: ");
        sb.Append(excludeCategoryIds);
        sb.Append(",count: ");
        sb.Append(count);
        sb.Append(",isLimit: ");
        sb.Append(isLimit);
        sb.Append(",isAuthorize: ");
        sb.Append(isAuthorize);
        sb.Append(",isOldVer: ");
        sb.Append(isOldVer);
        sb.Append(",startIndex: ");
        sb.Append(startIndex);
        sb.Append(",uin: ");
        sb.Append(uin);
        sb.Append(",cpu: ");
        sb.Append(cpu);
        sb.Append(",explanationType: ");
        sb.Append(explanationType);
        sb.Append(",isFillRecommendSofts: ");
        sb.Append(isFillRecommendSofts);
        sb.Append(",actionType: ");
        sb.Append(actionType);
        sb.Append(",project: ");
        sb.Append(project);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendSoftsExBySoftIdentifier_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetRecommendSoftsExBySoftIdentifier_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendSoftsExBySoftIdentifier_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendSoftsExBySoftIdentifier_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private int _pageSize;
      private int _pageIndex;
      private bool _enableCache;
      private int _installedStatus;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public int pageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          this._pageSize = value;
        }
      }

      public int pageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          this._pageIndex = value;
        }
      }

      public bool enableCache
      {
        get
        {
          return _enableCache;
        }
        set
        {
          __isset.enableCache = true;
          this._enableCache = value;
        }
      }

      public int installedStatus
      {
        get
        {
          return _installedStatus;
        }
        set
        {
          __isset.installedStatus = true;
          this._installedStatus = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool pageSize;
        public bool pageIndex;
        public bool enableCache;
        public bool installedStatus;
      }

      public Internal_GetInstalledSoftByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                pageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                pageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                enableCache = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                installedStatus = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pageSize);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableCache) {
          field.Name = "enableCache";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(enableCache);
          oprot.WriteFieldEnd();
        }
        if (__isset.installedStatus) {
          field.Name = "installedStatus";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(installedStatus);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",pageSize: ");
        sb.Append(pageSize);
        sb.Append(",pageIndex: ");
        sb.Append(pageIndex);
        sb.Append(",enableCache: ");
        sb.Append(enableCache);
        sb.Append(",installedStatus: ");
        sb.Append(installedStatus);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetInstalledSoftByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftCountByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
      }

      public Internal_GetInstalledSoftCountByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftCountByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftCountByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftCountByImei_result : TBase
    {
      private int _success;

      public int success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetInstalledSoftCountByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftCountByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftCountByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftByUin_args : TBase
    {
      private long _uin;
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private int _pageSize;
      private int _pageIndex;
      private bool _enableCache;

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public int pageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          this._pageSize = value;
        }
      }

      public int pageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          this._pageIndex = value;
        }
      }

      public bool enableCache
      {
        get
        {
          return _enableCache;
        }
        set
        {
          __isset.enableCache = true;
          this._enableCache = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uin;
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool pageSize;
        public bool pageIndex;
        public bool enableCache;
      }

      public Internal_GetInstalledSoftByUin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                pageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                pageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                enableCache = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftByUin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pageSize);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableCache) {
          field.Name = "enableCache";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(enableCache);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftByUin_args(");
        sb.Append("uin: ");
        sb.Append(uin);
        sb.Append(",imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",pageSize: ");
        sb.Append(pageSize);
        sb.Append(",pageIndex: ");
        sb.Append(pageIndex);
        sb.Append(",enableCache: ");
        sb.Append(enableCache);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftByUin_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetInstalledSoftByUin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftByUin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftByUin_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetImeisByUin_args : TBase
    {
      private long _uin;
      private int _fwVersion;
      private int _pad;
      private bool _filterByPlatform;

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public bool filterByPlatform
      {
        get
        {
          return _filterByPlatform;
        }
        set
        {
          __isset.filterByPlatform = true;
          this._filterByPlatform = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uin;
        public bool fwVersion;
        public bool pad;
        public bool filterByPlatform;
      }

      public Internal_GetImeisByUin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                filterByPlatform = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetImeisByUin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (__isset.filterByPlatform) {
          field.Name = "filterByPlatform";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(filterByPlatform);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetImeisByUin_args(");
        sb.Append("uin: ");
        sb.Append(uin);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",filterByPlatform: ");
        sb.Append(filterByPlatform);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetImeisByUin_result : TBase
    {
      private List<string> _success;

      public List<string> success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetImeisByUin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  success = new List<string>();
                  TList _list112 = iprot.ReadListBegin();
                  for( int _i113 = 0; _i113 < _list112.Count; ++_i113)
                  {
                    string _elem114 = null;
                    _elem114 = iprot.ReadString();
                    success.Add(_elem114);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetImeisByUin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, success.Count));
              foreach (string _iter115 in success)
              {
                oprot.WriteString(_iter115);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetImeisByUin_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_UpdateInstalledSoftHideStatusByImei_args : TBase
    {
      private List<string> _imeis;
      private List<string> _identifiers;
      private int _fwVersion;
      private int _pad;
      private int _hideStatus;

      public List<string> imeis
      {
        get
        {
          return _imeis;
        }
        set
        {
          __isset.imeis = true;
          this._imeis = value;
        }
      }

      public List<string> identifiers
      {
        get
        {
          return _identifiers;
        }
        set
        {
          __isset.identifiers = true;
          this._identifiers = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public int hideStatus
      {
        get
        {
          return _hideStatus;
        }
        set
        {
          __isset.hideStatus = true;
          this._hideStatus = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imeis;
        public bool identifiers;
        public bool fwVersion;
        public bool pad;
        public bool hideStatus;
      }

      public Internal_UpdateInstalledSoftHideStatusByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  imeis = new List<string>();
                  TList _list116 = iprot.ReadListBegin();
                  for( int _i117 = 0; _i117 < _list116.Count; ++_i117)
                  {
                    string _elem118 = null;
                    _elem118 = iprot.ReadString();
                    imeis.Add(_elem118);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  identifiers = new List<string>();
                  TList _list119 = iprot.ReadListBegin();
                  for( int _i120 = 0; _i120 < _list119.Count; ++_i120)
                  {
                    string _elem121 = null;
                    _elem121 = iprot.ReadString();
                    identifiers.Add(_elem121);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                hideStatus = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_UpdateInstalledSoftHideStatusByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imeis != null && __isset.imeis) {
          field.Name = "imeis";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, imeis.Count));
            foreach (string _iter122 in imeis)
            {
              oprot.WriteString(_iter122);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (identifiers != null && __isset.identifiers) {
          field.Name = "identifiers";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, identifiers.Count));
            foreach (string _iter123 in identifiers)
            {
              oprot.WriteString(_iter123);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (__isset.hideStatus) {
          field.Name = "hideStatus";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(hideStatus);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_UpdateInstalledSoftHideStatusByImei_args(");
        sb.Append("imeis: ");
        sb.Append(imeis);
        sb.Append(",identifiers: ");
        sb.Append(identifiers);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",hideStatus: ");
        sb.Append(hideStatus);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_UpdateInstalledSoftHideStatusByImei_result : TBase
    {

      public Internal_UpdateInstalledSoftHideStatusByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_UpdateInstalledSoftHideStatusByImei_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_UpdateInstalledSoftHideStatusByImei_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftCountByUin_args : TBase
    {
      private long _uin;
      private string _imei;
      private int _fwVersion;
      private int _pad;
      private bool _enableCache;

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public bool enableCache
      {
        get
        {
          return _enableCache;
        }
        set
        {
          __isset.enableCache = true;
          this._enableCache = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uin;
        public bool imei;
        public bool fwVersion;
        public bool pad;
        public bool enableCache;
      }

      public Internal_GetInstalledSoftCountByUin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                enableCache = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftCountByUin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableCache) {
          field.Name = "enableCache";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(enableCache);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftCountByUin_args(");
        sb.Append("uin: ");
        sb.Append(uin);
        sb.Append(",imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",enableCache: ");
        sb.Append(enableCache);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftCountByUin_result : TBase
    {
      private int _success;

      public int success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetInstalledSoftCountByUin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftCountByUin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftCountByUin_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_ClearUserSoftware_args : TBase
    {
      private string _imei;
      private int _platform;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int platform
      {
        get
        {
          return _platform;
        }
        set
        {
          __isset.platform = true;
          this._platform = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool platform;
      }

      public Internal_ClearUserSoftware_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                platform = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_ClearUserSoftware_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.platform) {
          field.Name = "platform";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(platform);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_ClearUserSoftware_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",platform: ");
        sb.Append(platform);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_ClearUserSoftware_result : TBase
    {

      public Internal_ClearUserSoftware_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_ClearUserSoftware_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_ClearUserSoftware_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetLikeOrNotSofts_args : TBase
    {
      private long _uin;
      private string _imei;
      private int _fwVersion;
      private int _pad;

      public long uin
      {
        get
        {
          return _uin;
        }
        set
        {
          __isset.uin = true;
          this._uin = value;
        }
      }

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uin;
        public bool imei;
        public bool fwVersion;
        public bool pad;
      }

      public Internal_GetLikeOrNotSofts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                uin = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetLikeOrNotSofts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.uin) {
          field.Name = "uin";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(uin);
          oprot.WriteFieldEnd();
        }
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetLikeOrNotSofts_args(");
        sb.Append("uin: ");
        sb.Append(uin);
        sb.Append(",imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetLikeOrNotSofts_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetLikeOrNotSofts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetLikeOrNotSofts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetLikeOrNotSofts_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftHideStatusByImeis_args : TBase
    {
      private List<string> _imeis;
      private int _fwVersion;
      private int _pad;
      private int _pagesize;
      private int _pageindex;
      private int _installedStatus;

      public List<string> imeis
      {
        get
        {
          return _imeis;
        }
        set
        {
          __isset.imeis = true;
          this._imeis = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }

      public int pagesize
      {
        get
        {
          return _pagesize;
        }
        set
        {
          __isset.pagesize = true;
          this._pagesize = value;
        }
      }

      public int pageindex
      {
        get
        {
          return _pageindex;
        }
        set
        {
          __isset.pageindex = true;
          this._pageindex = value;
        }
      }

      public int installedStatus
      {
        get
        {
          return _installedStatus;
        }
        set
        {
          __isset.installedStatus = true;
          this._installedStatus = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imeis;
        public bool fwVersion;
        public bool pad;
        public bool pagesize;
        public bool pageindex;
        public bool installedStatus;
      }

      public Internal_GetInstalledSoftHideStatusByImeis_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  imeis = new List<string>();
                  TList _list124 = iprot.ReadListBegin();
                  for( int _i125 = 0; _i125 < _list124.Count; ++_i125)
                  {
                    string _elem126 = null;
                    _elem126 = iprot.ReadString();
                    imeis.Add(_elem126);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                pagesize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                pageindex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                installedStatus = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftHideStatusByImeis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imeis != null && __isset.imeis) {
          field.Name = "imeis";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, imeis.Count));
            foreach (string _iter127 in imeis)
            {
              oprot.WriteString(_iter127);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        if (__isset.pagesize) {
          field.Name = "pagesize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pagesize);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageindex) {
          field.Name = "pageindex";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pageindex);
          oprot.WriteFieldEnd();
        }
        if (__isset.installedStatus) {
          field.Name = "installedStatus";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(installedStatus);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftHideStatusByImeis_args(");
        sb.Append("imeis: ");
        sb.Append(imeis);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(",pagesize: ");
        sb.Append(pagesize);
        sb.Append(",pageindex: ");
        sb.Append(pageindex);
        sb.Append(",installedStatus: ");
        sb.Append(installedStatus);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSoftHideStatusByImeis_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetInstalledSoftHideStatusByImeis_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSoftHideStatusByImeis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSoftHideStatusByImeis_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetFilterableSoft_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
      }

      public Internal_GetFilterableSoft_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetFilterableSoft_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetFilterableSoft_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetFilterableSoft_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetFilterableSoft_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetFilterableSoft_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetFilterableSoft_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledAndUnInstalledCount_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
      }

      public Internal_GetInstalledAndUnInstalledCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledAndUnInstalledCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledAndUnInstalledCount_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledAndUnInstalledCount_result : TBase
    {
      private Dictionary<int, int> _success;

      public Dictionary<int, int> success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetInstalledAndUnInstalledCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  success = new Dictionary<int, int>();
                  TMap _map128 = iprot.ReadMapBegin();
                  for( int _i129 = 0; _i129 < _map128.Count; ++_i129)
                  {
                    int _key130;
                    int _val131;
                    _key130 = iprot.ReadI32();
                    _val131 = iprot.ReadI32();
                    success[_key130] = _val131;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledAndUnInstalledCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, success.Count));
              foreach (int _iter132 in success.Keys)
              {
                oprot.WriteI32(_iter132);
                oprot.WriteI32(success[_iter132]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledAndUnInstalledCount_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSofts_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
      }

      public Internal_GetInstalledSofts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSofts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSofts_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetInstalledSofts_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetInstalledSofts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetInstalledSofts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetInstalledSofts_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetEarliestTimeGatherTime_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _pad;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int pad
      {
        get
        {
          return _pad;
        }
        set
        {
          __isset.pad = true;
          this._pad = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool pad;
      }

      public Internal_GetEarliestTimeGatherTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                pad = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetEarliestTimeGatherTime_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.pad) {
          field.Name = "pad";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(pad);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetEarliestTimeGatherTime_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",pad: ");
        sb.Append(pad);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetEarliestTimeGatherTime_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetEarliestTimeGatherTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetEarliestTimeGatherTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetEarliestTimeGatherTime_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendThemesByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _randomSelect;
      private bool _isAdd;
      private int _channel;
      private long _minDateTicks;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool randomSelect
      {
        get
        {
          return _randomSelect;
        }
        set
        {
          __isset.randomSelect = true;
          this._randomSelect = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int channel
      {
        get
        {
          return _channel;
        }
        set
        {
          __isset.channel = true;
          this._channel = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool randomSelect;
        public bool isAdd;
        public bool channel;
        public bool minDateTicks;
      }

      public Internal_GetRecommendThemesByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                randomSelect = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                channel = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendThemesByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.randomSelect) {
          field.Name = "randomSelect";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(randomSelect);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel) {
          field.Name = "channel";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendThemesByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",randomSelect: ");
        sb.Append(randomSelect);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",channel: ");
        sb.Append(channel);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendThemesByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetRecommendThemesByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendThemesByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendThemesByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendThemeV6sByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _randomSelect;
      private bool _isAdd;
      private int _channel;
      private long _minDateTicks;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool randomSelect
      {
        get
        {
          return _randomSelect;
        }
        set
        {
          __isset.randomSelect = true;
          this._randomSelect = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int channel
      {
        get
        {
          return _channel;
        }
        set
        {
          __isset.channel = true;
          this._channel = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool randomSelect;
        public bool isAdd;
        public bool channel;
        public bool minDateTicks;
      }

      public Internal_GetRecommendThemeV6sByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                randomSelect = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                channel = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendThemeV6sByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.randomSelect) {
          field.Name = "randomSelect";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(randomSelect);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel) {
          field.Name = "channel";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendThemeV6sByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",randomSelect: ");
        sb.Append(randomSelect);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",channel: ");
        sb.Append(channel);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendThemeV6sByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetRecommendThemeV6sByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendThemeV6sByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendThemeV6sByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetGoodRecommendThemesByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _overTimeOption;
      private int _channel;
      private long _minDateTicks;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int overTimeOption
      {
        get
        {
          return _overTimeOption;
        }
        set
        {
          __isset.overTimeOption = true;
          this._overTimeOption = value;
        }
      }

      public int channel
      {
        get
        {
          return _channel;
        }
        set
        {
          __isset.channel = true;
          this._channel = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool overTimeOption;
        public bool channel;
        public bool minDateTicks;
      }

      public Internal_GetGoodRecommendThemesByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                overTimeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                channel = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetGoodRecommendThemesByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.overTimeOption) {
          field.Name = "overTimeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(overTimeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel) {
          field.Name = "channel";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetGoodRecommendThemesByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",overTimeOption: ");
        sb.Append(overTimeOption);
        sb.Append(",channel: ");
        sb.Append(channel);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetGoodRecommendThemesByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetGoodRecommendThemesByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetGoodRecommendThemesByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetGoodRecommendThemesByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetGoodRecommendThemeV6sByImei_args : TBase
    {
      private string _imei;
      private int _fwVersion;
      private int _slicenumber;
      private int _mlicenumber;
      private int _overTimeOption;
      private int _channel;
      private long _minDateTicks;

      public string imei
      {
        get
        {
          return _imei;
        }
        set
        {
          __isset.imei = true;
          this._imei = value;
        }
      }

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int overTimeOption
      {
        get
        {
          return _overTimeOption;
        }
        set
        {
          __isset.overTimeOption = true;
          this._overTimeOption = value;
        }
      }

      public int channel
      {
        get
        {
          return _channel;
        }
        set
        {
          __isset.channel = true;
          this._channel = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool imei;
        public bool fwVersion;
        public bool slicenumber;
        public bool mlicenumber;
        public bool overTimeOption;
        public bool channel;
        public bool minDateTicks;
      }

      public Internal_GetGoodRecommendThemeV6sByImei_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                imei = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                overTimeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                channel = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetGoodRecommendThemeV6sByImei_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (imei != null && __isset.imei) {
          field.Name = "imei";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(imei);
          oprot.WriteFieldEnd();
        }
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.overTimeOption) {
          field.Name = "overTimeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(overTimeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel) {
          field.Name = "channel";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetGoodRecommendThemeV6sByImei_args(");
        sb.Append("imei: ");
        sb.Append(imei);
        sb.Append(",fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",overTimeOption: ");
        sb.Append(overTimeOption);
        sb.Append(",channel: ");
        sb.Append(channel);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetGoodRecommendThemeV6sByImei_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetGoodRecommendThemeV6sByImei_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetGoodRecommendThemeV6sByImei_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetGoodRecommendThemeV6sByImei_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendThemesByThemeId_args : TBase
    {
      private int _fwVersion;
      private long _themeId;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;
      private int _arithmetic;
      private int _channel;
      private long _minDateTicks;

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int arithmetic
      {
        get
        {
          return _arithmetic;
        }
        set
        {
          __isset.arithmetic = true;
          this._arithmetic = value;
        }
      }

      public int channel
      {
        get
        {
          return _channel;
        }
        set
        {
          __isset.channel = true;
          this._channel = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fwVersion;
        public bool themeId;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
        public bool arithmetic;
        public bool channel;
        public bool minDateTicks;
      }

      public Internal_GetRecommendThemesByThemeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                arithmetic = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                channel = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendThemesByThemeId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.arithmetic) {
          field.Name = "arithmetic";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(arithmetic);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel) {
          field.Name = "channel";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendThemesByThemeId_args(");
        sb.Append("fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",themeId: ");
        sb.Append(themeId);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",arithmetic: ");
        sb.Append(arithmetic);
        sb.Append(",channel: ");
        sb.Append(channel);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendThemesByThemeId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetRecommendThemesByThemeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendThemesByThemeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendThemesByThemeId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendThemeV6sByThemeId_args : TBase
    {
      private int _fwVersion;
      private long _themeId;
      private int _slicenumber;
      private int _mlicenumber;
      private int _timeOption;
      private bool _isAdd;
      private int _arithmetic;
      private int _channel;
      private long _minDateTicks;

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }

      public int slicenumber
      {
        get
        {
          return _slicenumber;
        }
        set
        {
          __isset.slicenumber = true;
          this._slicenumber = value;
        }
      }

      public int mlicenumber
      {
        get
        {
          return _mlicenumber;
        }
        set
        {
          __isset.mlicenumber = true;
          this._mlicenumber = value;
        }
      }

      public int timeOption
      {
        get
        {
          return _timeOption;
        }
        set
        {
          __isset.timeOption = true;
          this._timeOption = value;
        }
      }

      public bool isAdd
      {
        get
        {
          return _isAdd;
        }
        set
        {
          __isset.isAdd = true;
          this._isAdd = value;
        }
      }

      public int arithmetic
      {
        get
        {
          return _arithmetic;
        }
        set
        {
          __isset.arithmetic = true;
          this._arithmetic = value;
        }
      }

      public int channel
      {
        get
        {
          return _channel;
        }
        set
        {
          __isset.channel = true;
          this._channel = value;
        }
      }

      public long minDateTicks
      {
        get
        {
          return _minDateTicks;
        }
        set
        {
          __isset.minDateTicks = true;
          this._minDateTicks = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fwVersion;
        public bool themeId;
        public bool slicenumber;
        public bool mlicenumber;
        public bool timeOption;
        public bool isAdd;
        public bool arithmetic;
        public bool channel;
        public bool minDateTicks;
      }

      public Internal_GetRecommendThemeV6sByThemeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                slicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                mlicenumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                timeOption = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                isAdd = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                arithmetic = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                channel = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                minDateTicks = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendThemeV6sByThemeId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        if (__isset.slicenumber) {
          field.Name = "slicenumber";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(slicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.mlicenumber) {
          field.Name = "mlicenumber";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(mlicenumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOption) {
          field.Name = "timeOption";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(timeOption);
          oprot.WriteFieldEnd();
        }
        if (__isset.isAdd) {
          field.Name = "isAdd";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(isAdd);
          oprot.WriteFieldEnd();
        }
        if (__isset.arithmetic) {
          field.Name = "arithmetic";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(arithmetic);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel) {
          field.Name = "channel";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.minDateTicks) {
          field.Name = "minDateTicks";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(minDateTicks);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendThemeV6sByThemeId_args(");
        sb.Append("fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",themeId: ");
        sb.Append(themeId);
        sb.Append(",slicenumber: ");
        sb.Append(slicenumber);
        sb.Append(",mlicenumber: ");
        sb.Append(mlicenumber);
        sb.Append(",timeOption: ");
        sb.Append(timeOption);
        sb.Append(",isAdd: ");
        sb.Append(isAdd);
        sb.Append(",arithmetic: ");
        sb.Append(arithmetic);
        sb.Append(",channel: ");
        sb.Append(channel);
        sb.Append(",minDateTicks: ");
        sb.Append(minDateTicks);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetRecommendThemeV6sByThemeId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetRecommendThemeV6sByThemeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetRecommendThemeV6sByThemeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetRecommendThemeV6sByThemeId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetThemeV6ByThemeId_args : TBase
    {
      private int _fwVersion;
      private long _themeId;

      public int fwVersion
      {
        get
        {
          return _fwVersion;
        }
        set
        {
          __isset.fwVersion = true;
          this._fwVersion = value;
        }
      }

      public long themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fwVersion;
        public bool themeId;
      }

      public Internal_GetThemeV6ByThemeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                fwVersion = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                themeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetThemeV6ByThemeId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.fwVersion) {
          field.Name = "fwVersion";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(fwVersion);
          oprot.WriteFieldEnd();
        }
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(themeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetThemeV6ByThemeId_args(");
        sb.Append("fwVersion: ");
        sb.Append(fwVersion);
        sb.Append(",themeId: ");
        sb.Append(themeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetThemeV6ByThemeId_result : TBase
    {
      private byte[] _success;

      public byte[] success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetThemeV6ByThemeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetThemeV6ByThemeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetThemeV6ByThemeId_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_CalculateThemeRecommendById_args : TBase
    {
      private int _themeId;

      public int themeId
      {
        get
        {
          return _themeId;
        }
        set
        {
          __isset.themeId = true;
          this._themeId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool themeId;
      }

      public Internal_CalculateThemeRecommendById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                themeId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_CalculateThemeRecommendById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.themeId) {
          field.Name = "themeId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(themeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_CalculateThemeRecommendById_args(");
        sb.Append("themeId: ");
        sb.Append(themeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_CalculateThemeRecommendById_result : TBase
    {
      private int _success;

      public int success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_CalculateThemeRecommendById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_CalculateThemeRecommendById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_CalculateThemeRecommendById_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_RefreshIdx_args : TBase
    {
      private string _file;
      private int _type;

      public string file
      {
        get
        {
          return _file;
        }
        set
        {
          __isset.file = true;
          this._file = value;
        }
      }

      public int type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool file;
        public bool type;
      }

      public Internal_RefreshIdx_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                file = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_RefreshIdx_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (file != null && __isset.file) {
          field.Name = "file";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(file);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_RefreshIdx_args(");
        sb.Append("file: ");
        sb.Append(file);
        sb.Append(",type: ");
        sb.Append(type);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_RefreshIdx_result : TBase
    {
      private int _success;

      public int success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_RefreshIdx_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_RefreshIdx_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_RefreshIdx_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetConfig_args : TBase
    {

      public Internal_GetConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetConfig_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetConfig_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Internal_GetConfig_result : TBase
    {
      private string _success;

      public string success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Internal_GetConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Internal_GetConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Internal_GetConfig_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
