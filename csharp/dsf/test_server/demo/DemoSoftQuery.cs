/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace baidu91.appsvc.demo
{
  public partial class DemoSoftQuery {
    public interface Iface {
      int test1();
      #if SILVERLIGHT
      IAsyncResult Begin_test1(AsyncCallback callback, object state);
      int End_test1(IAsyncResult asyncResult);
      #endif
      Dictionary<string, string> test2();
      #if SILVERLIGHT
      IAsyncResult Begin_test2(AsyncCallback callback, object state);
      Dictionary<string, string> End_test2(IAsyncResult asyncResult);
      #endif
      void ping();
      #if SILVERLIGHT
      IAsyncResult Begin_ping(AsyncCallback callback, object state);
      void End_ping(IAsyncResult asyncResult);
      #endif
      List<SimpleSoft> getAll();
      #if SILVERLIGHT
      IAsyncResult Begin_getAll(AsyncCallback callback, object state);
      List<SimpleSoft> End_getAll(IAsyncResult asyncResult);
      #endif
      SimpleSoft getByID(long id);
      #if SILVERLIGHT
      IAsyncResult Begin_getByID(AsyncCallback callback, object state, long id);
      SimpleSoft End_getByID(IAsyncResult asyncResult);
      #endif
      List<SimpleSoft> getByVender(string vender);
      #if SILVERLIGHT
      IAsyncResult Begin_getByVender(AsyncCallback callback, object state, string vender);
      List<SimpleSoft> End_getByVender(IAsyncResult asyncResult);
      #endif
      void put(long id, SimpleSoft soft);
      #if SILVERLIGHT
      IAsyncResult Begin_put(AsyncCallback callback, object state, long id, SimpleSoft soft);
      void End_put(IAsyncResult asyncResult);
      #endif
    }

    public interface Interface : Iface, IDisposable {
    }
    public class Client : TServiceClient, Interface {
      public Client(TProtocol prot) : base(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      protected int seqid_;

      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_test1(AsyncCallback callback, object state)
      {
        return send_test1(callback, state);
      }

      public int End_test1(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_test1();
      }

      #endif

      public int test1()
      {
        #if !SILVERLIGHT
        send_test1();
        return recv_test1();

        #else
        var asyncResult = Begin_test1(null, null);
        return End_test1(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_test1(AsyncCallback callback, object state)
      #else
      public void send_test1()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("test1", TMessageType.Call, seqid_));
        test1_args args = new test1_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_test1()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        test1_result result = new test1_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "test1 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_test2(AsyncCallback callback, object state)
      {
        return send_test2(callback, state);
      }

      public Dictionary<string, string> End_test2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_test2();
      }

      #endif

      public Dictionary<string, string> test2()
      {
        #if !SILVERLIGHT
        send_test2();
        return recv_test2();

        #else
        var asyncResult = Begin_test2(null, null);
        return End_test2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_test2(AsyncCallback callback, object state)
      #else
      public void send_test2()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("test2", TMessageType.Call, seqid_));
        test2_args args = new test2_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, string> recv_test2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        test2_result result = new test2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ping(AsyncCallback callback, object state)
      {
        return send_ping(callback, state);
      }

      public void End_ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ping();
      }

      #endif

      public void ping()
      {
        #if !SILVERLIGHT
        send_ping();
        recv_ping();

        #else
        var asyncResult = Begin_ping(null, null);
        End_ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ping(AsyncCallback callback, object state)
      #else
      public void send_ping()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAll(AsyncCallback callback, object state)
      {
        return send_getAll(callback, state);
      }

      public List<SimpleSoft> End_getAll(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAll();
      }

      #endif

      public List<SimpleSoft> getAll()
      {
        #if !SILVERLIGHT
        send_getAll();
        return recv_getAll();

        #else
        var asyncResult = Begin_getAll(null, null);
        return End_getAll(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAll(AsyncCallback callback, object state)
      #else
      public void send_getAll()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAll", TMessageType.Call, seqid_));
        getAll_args args = new getAll_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<SimpleSoft> recv_getAll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAll_result result = new getAll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.ex) {
          throw result.ex;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getByID(AsyncCallback callback, object state, long id)
      {
        return send_getByID(callback, state, id);
      }

      public SimpleSoft End_getByID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getByID();
      }

      #endif

      public SimpleSoft getByID(long id)
      {
        #if !SILVERLIGHT
        send_getByID(id);
        return recv_getByID();

        #else
        var asyncResult = Begin_getByID(null, null, id);
        return End_getByID(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getByID(AsyncCallback callback, object state, long id)
      #else
      public void send_getByID(long id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getByID", TMessageType.Call, seqid_));
        getByID_args args = new getByID_args();
        args.id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SimpleSoft recv_getByID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getByID_result result = new getByID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.ex) {
          throw result.ex;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getByVender(AsyncCallback callback, object state, string vender)
      {
        return send_getByVender(callback, state, vender);
      }

      public List<SimpleSoft> End_getByVender(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getByVender();
      }

      #endif

      public List<SimpleSoft> getByVender(string vender)
      {
        #if !SILVERLIGHT
        send_getByVender(vender);
        return recv_getByVender();

        #else
        var asyncResult = Begin_getByVender(null, null, vender);
        return End_getByVender(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getByVender(AsyncCallback callback, object state, string vender)
      #else
      public void send_getByVender(string vender)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getByVender", TMessageType.Call, seqid_));
        getByVender_args args = new getByVender_args();
        args.vender = vender;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<SimpleSoft> recv_getByVender()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getByVender_result result = new getByVender_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.ex) {
          throw result.ex;
        }
        return null;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_put(AsyncCallback callback, object state, long id, SimpleSoft soft)
      {
        return send_put(callback, state, id, soft);
      }

      public void End_put(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_put();
      }

      #endif

      public void put(long id, SimpleSoft soft)
      {
        #if !SILVERLIGHT
        send_put(id, soft);
        recv_put();

        #else
        var asyncResult = Begin_put(null, null, id, soft);
        End_put(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_put(AsyncCallback callback, object state, long id, SimpleSoft soft)
      #else
      public void send_put(long id, SimpleSoft soft)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("put", TMessageType.Call, seqid_));
        put_args args = new put_args();
        args.id = id;
        args.soft = soft;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_put()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        put_result result = new put_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.ex;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["test1"] = test1_Process;
        processMap_["test2"] = test2_Process;
        processMap_["ping"] = ping_Process;
        processMap_["getAll"] = getAll_Process;
        processMap_["getByID"] = getByID_Process;
        processMap_["getByVender"] = getByVender_Process;
        processMap_["put"] = put_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void test1_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        test1_args args = new test1_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        test1_result result = new test1_result();
        result.success = iface_.test1();
        oprot.WriteMessageBegin(new TMessage("test1", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void test2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        test2_args args = new test2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        test2_result result = new test2_result();
        result.success = iface_.test2();
        oprot.WriteMessageBegin(new TMessage("test2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        iface_.ping();
        oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAll_args args = new getAll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAll_result result = new getAll_result();
        try {
          result.success = iface_.getAll();
        } catch (DemoException ex) {
          result.ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getAll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getByID_args args = new getByID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getByID_result result = new getByID_result();
        try {
          result.success = iface_.getByID(args.id);
        } catch (DemoException ex) {
          result.ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getByID", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getByVender_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getByVender_args args = new getByVender_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getByVender_result result = new getByVender_result();
        try {
          result.success = iface_.getByVender(args.vender);
        } catch (DemoException ex) {
          result.ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getByVender", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void put_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        put_args args = new put_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        put_result result = new put_result();
        try {
          iface_.put(args.id, args.soft);
        } catch (DemoException ex) {
          result.ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("put", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class test1_args : TBase
    {

      public test1_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("test1_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("test1_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class test1_result : TBase
    {
      private int _success;

      public int success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public test1_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("test1_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("test1_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class test2_args : TBase
    {

      public test2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("test2_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("test2_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class test2_result : TBase
    {
      private Dictionary<string, string> _success;

      public Dictionary<string, string> success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public test2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  success = new Dictionary<string, string>();
                  TMap _map0 = iprot.ReadMapBegin();
                  for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                  {
                    string _key2;
                    string _val3;
                    _key2 = iprot.ReadString();
                    _val3 = iprot.ReadString();
                    success[_key2] = _val3;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("test2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, success.Count));
              foreach (string _iter4 in success.Keys)
              {
                oprot.WriteString(_iter4);
                oprot.WriteString(success[_iter4]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("test2_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_args : TBase
    {

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_result : TBase
    {

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAll_args : TBase
    {

      public getAll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAll_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAll_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAll_result : TBase
    {
      private List<SimpleSoft> _success;
      private DemoException _ex;

      public List<SimpleSoft> success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public DemoException ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public getAll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  success = new List<SimpleSoft>();
                  TList _list5 = iprot.ReadListBegin();
                  for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                  {
                    SimpleSoft _elem7 = new SimpleSoft();
                    _elem7 = new SimpleSoft();
                    _elem7.Read(iprot);
                    success.Add(_elem7);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                ex = new DemoException();
                ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, success.Count));
              foreach (SimpleSoft _iter8 in success)
              {
                _iter8.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAll_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(",ex: ");
        sb.Append(ex== null ? "<null>" : ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getByID_args : TBase
    {
      private long _id;

      public long id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public getByID_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getByID_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getByID_args(");
        sb.Append("id: ");
        sb.Append(id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getByID_result : TBase
    {
      private SimpleSoft _success;
      private DemoException _ex;

      public SimpleSoft success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public DemoException ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public getByID_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                success = new SimpleSoft();
                success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                ex = new DemoException();
                ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getByID_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getByID_result(");
        sb.Append("success: ");
        sb.Append(success== null ? "<null>" : success.ToString());
        sb.Append(",ex: ");
        sb.Append(ex== null ? "<null>" : ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getByVender_args : TBase
    {
      private string _vender;

      public string vender
      {
        get
        {
          return _vender;
        }
        set
        {
          __isset.vender = true;
          this._vender = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool vender;
      }

      public getByVender_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                vender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getByVender_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (vender != null && __isset.vender) {
          field.Name = "vender";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(vender);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getByVender_args(");
        sb.Append("vender: ");
        sb.Append(vender);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getByVender_result : TBase
    {
      private List<SimpleSoft> _success;
      private DemoException _ex;

      public List<SimpleSoft> success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public DemoException ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public getByVender_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  success = new List<SimpleSoft>();
                  TList _list9 = iprot.ReadListBegin();
                  for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                  {
                    SimpleSoft _elem11 = new SimpleSoft();
                    _elem11 = new SimpleSoft();
                    _elem11.Read(iprot);
                    success.Add(_elem11);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                ex = new DemoException();
                ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getByVender_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, success.Count));
              foreach (SimpleSoft _iter12 in success)
              {
                _iter12.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getByVender_result(");
        sb.Append("success: ");
        sb.Append(success);
        sb.Append(",ex: ");
        sb.Append(ex== null ? "<null>" : ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class put_args : TBase
    {
      private long _id;
      private SimpleSoft _soft;

      public long id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public SimpleSoft soft
      {
        get
        {
          return _soft;
        }
        set
        {
          __isset.soft = true;
          this._soft = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
        public bool soft;
      }

      public put_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                soft = new SimpleSoft();
                soft.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("put_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(id);
          oprot.WriteFieldEnd();
        }
        if (soft != null && __isset.soft) {
          field.Name = "soft";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          soft.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("put_args(");
        sb.Append("id: ");
        sb.Append(id);
        sb.Append(",soft: ");
        sb.Append(soft== null ? "<null>" : soft.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class put_result : TBase
    {
      private DemoException _ex;

      public DemoException ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
      }

      public put_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ex = new DemoException();
                ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("put_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("put_result(");
        sb.Append("ex: ");
        sb.Append(ex== null ? "<null>" : ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
